{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"type\", \"visible\", \"theme\", \"onLayout\", \"padding\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport color from 'color';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AnimatedText from \"./Typography/AnimatedText\";\nimport { withTheme } from \"../core/theming\";\n\nvar HelperText = function HelperText(_ref) {\n  var style = _ref.style,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'info' : _ref$type,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? true : _ref$visible,\n      theme = _ref.theme,\n      onLayout = _ref.onLayout,\n      _ref$padding = _ref.padding,\n      padding = _ref$padding === void 0 ? 'normal' : _ref$padding,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useRef = React.useRef(new Animated.Value(visible ? 1 : 0)),\n      shown = _React$useRef.current;\n\n  var _React$useRef2 = React.useRef(0),\n      textHeight = _React$useRef2.current;\n\n  var scale = theme.animation.scale;\n  React.useEffect(function () {\n    if (visible) {\n      Animated.timing(shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      Animated.timing(shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [visible, scale, shown]);\n\n  var handleTextLayout = function handleTextLayout(e) {\n    onLayout === null || onLayout === void 0 ? void 0 : onLayout(e);\n    textHeight = e.nativeEvent.layout.height;\n  };\n\n  var colors = theme.colors,\n      dark = theme.dark;\n  var textColor = type === 'error' ? colors.error : color(colors.text).alpha(dark ? 0.7 : 0.54).rgb().string();\n  return React.createElement(AnimatedText, _extends({\n    onLayout: handleTextLayout,\n    style: [styles.text, padding !== 'none' ? styles.padding : {}, {\n      color: textColor,\n      opacity: shown,\n      transform: visible && type === 'error' ? [{\n        translateY: shown.interpolate({\n          inputRange: [0, 1],\n          outputRange: [-textHeight / 2, 0]\n        })\n      }] : []\n    }, style]\n  }, rest), rest.children);\n};\n\nvar styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4\n  },\n  padding: {\n    paddingHorizontal: 12\n  }\n});\nexport default withTheme(HelperText);","map":{"version":3,"mappings":"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","names":["React","color","AnimatedText","withTheme","HelperText","style","type","visible","theme","onLayout","padding","rest","useRef","Animated","Value","shown","current","textHeight","scale","animation","useEffect","timing","toValue","duration","useNativeDriver","start","handleTextLayout","e","nativeEvent","layout","height","colors","dark","textColor","error","text","alpha","rgb","string","styles","opacity","transform","translateY","interpolate","inputRange","outputRange","children","StyleSheet","create","fontSize","paddingVertical","paddingHorizontal"],"sources":["HelperText.tsx"],"sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport {\n  Animated,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport AnimatedText from './Typography/AnimatedText';\nimport { withTheme } from '../core/theming';\nimport type { $Omit } from '../types';\n\ntype Props = $Omit<\n  $Omit<React.ComponentPropsWithRef<typeof AnimatedText>, 'padding'>,\n  'type'\n> & {\n  /**\n   * Type of the helper text.\n   */\n  type: 'error' | 'info';\n  /**\n   * Whether to display the helper text.\n   */\n  visible?: boolean;\n  /**\n   * Whether to apply padding to the helper text.\n   */\n  padding?: 'none' | 'normal';\n  /**\n   * Text content of the HelperText.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/helper-text.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { HelperText, TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *    const onChangeText = text => setText(text);\n *\n *   const hasErrors = () => {\n *     return !text.includes('@');\n *   };\n *\n *  return (\n *     <View>\n *       <TextInput label=\"Email\" value={text} onChangeText={onChangeText} />\n *       <HelperText type=\"error\" visible={hasErrors()}>\n *         Email address is invalid!\n *       </HelperText>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst HelperText = ({\n  style,\n  type = 'info',\n  visible = true,\n  theme,\n  onLayout,\n  padding = 'normal',\n  ...rest\n}: Props) => {\n  const { current: shown } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n\n  let { current: textHeight } = React.useRef<number>(0);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    if (visible) {\n      // show text\n      Animated.timing(shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      // hide text\n      Animated.timing(shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, shown]);\n\n  const handleTextLayout = (e: LayoutChangeEvent) => {\n    onLayout?.(e);\n    textHeight = e.nativeEvent.layout.height;\n  };\n\n  const { colors, dark } = theme;\n\n  const textColor =\n    type === 'error'\n      ? colors.error\n      : color(colors.text)\n          .alpha(dark ? 0.7 : 0.54)\n          .rgb()\n          .string();\n\n  return (\n    <AnimatedText\n      onLayout={handleTextLayout}\n      style={[\n        styles.text,\n        padding !== 'none' ? styles.padding : {},\n        {\n          color: textColor,\n          opacity: shown,\n          transform:\n            visible && type === 'error'\n              ? [\n                  {\n                    translateY: shown.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [-textHeight / 2, 0],\n                    }),\n                  },\n                ]\n              : [],\n        },\n        style,\n      ]}\n      {...rest}\n    >\n      {rest.children}\n    </AnimatedText>\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4,\n  },\n  padding: {\n    paddingHorizontal: 12,\n  },\n});\n\nexport default withTheme(HelperText);\n"]},"metadata":{},"sourceType":"module"}