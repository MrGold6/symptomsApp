{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { getHeaderTitle, HeaderBackContext, HeaderHeightContext, HeaderShownContext } from '@react-navigation/elements';\nimport { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ModalPresentationContext from \"../../utils/ModalPresentationContext\";\nimport useKeyboardManager from \"../../utils/useKeyboardManager\";\nimport Card from \"./Card\";\nvar EPSILON = 0.1;\n\nfunction CardContainer(_ref) {\n  var interpolationIndex = _ref.interpolationIndex,\n      index = _ref.index,\n      active = _ref.active,\n      closing = _ref.closing,\n      gesture = _ref.gesture,\n      focused = _ref.focused,\n      modal = _ref.modal,\n      getPreviousScene = _ref.getPreviousScene,\n      getFocusedRoute = _ref.getFocusedRoute,\n      headerDarkContent = _ref.headerDarkContent,\n      hasAbsoluteFloatHeader = _ref.hasAbsoluteFloatHeader,\n      headerHeight = _ref.headerHeight,\n      onHeaderHeightChange = _ref.onHeaderHeightChange,\n      isParentHeaderShown = _ref.isParentHeaderShown,\n      isNextScreenTransparent = _ref.isNextScreenTransparent,\n      detachCurrentScreen = _ref.detachCurrentScreen,\n      layout = _ref.layout,\n      onCloseRoute = _ref.onCloseRoute,\n      onOpenRoute = _ref.onOpenRoute,\n      onGestureCancel = _ref.onGestureCancel,\n      onGestureEnd = _ref.onGestureEnd,\n      onGestureStart = _ref.onGestureStart,\n      onTransitionEnd = _ref.onTransitionEnd,\n      onTransitionStart = _ref.onTransitionStart,\n      renderHeader = _ref.renderHeader,\n      renderScene = _ref.renderScene,\n      safeAreaInsetBottom = _ref.safeAreaInsetBottom,\n      safeAreaInsetLeft = _ref.safeAreaInsetLeft,\n      safeAreaInsetRight = _ref.safeAreaInsetRight,\n      safeAreaInsetTop = _ref.safeAreaInsetTop,\n      scene = _ref.scene;\n  var parentHeaderHeight = React.useContext(HeaderHeightContext);\n\n  var _useKeyboardManager = useKeyboardManager(React.useCallback(function () {\n    var _scene$descriptor = scene.descriptor,\n        options = _scene$descriptor.options,\n        navigation = _scene$descriptor.navigation;\n    return navigation.isFocused() && options.keyboardHandlingEnabled !== false;\n  }, [scene.descriptor])),\n      onPageChangeStart = _useKeyboardManager.onPageChangeStart,\n      onPageChangeCancel = _useKeyboardManager.onPageChangeCancel,\n      onPageChangeConfirm = _useKeyboardManager.onPageChangeConfirm;\n\n  var handleOpen = function handleOpen() {\n    var route = scene.descriptor.route;\n    onTransitionEnd({\n      route: route\n    }, false);\n    onOpenRoute({\n      route: route\n    });\n  };\n\n  var handleClose = function handleClose() {\n    var route = scene.descriptor.route;\n    onTransitionEnd({\n      route: route\n    }, true);\n    onCloseRoute({\n      route: route\n    });\n  };\n\n  var handleGestureBegin = function handleGestureBegin() {\n    var route = scene.descriptor.route;\n    onPageChangeStart();\n    onGestureStart({\n      route: route\n    });\n  };\n\n  var handleGestureCanceled = function handleGestureCanceled() {\n    var route = scene.descriptor.route;\n    onPageChangeCancel();\n    onGestureCancel({\n      route: route\n    });\n  };\n\n  var handleGestureEnd = function handleGestureEnd() {\n    var route = scene.descriptor.route;\n    onGestureEnd({\n      route: route\n    });\n  };\n\n  var handleTransition = function handleTransition(_ref2) {\n    var closing = _ref2.closing,\n        gesture = _ref2.gesture;\n    var route = scene.descriptor.route;\n\n    if (!gesture) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(true);\n    } else if (active && closing) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(false);\n    } else {\n      onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    }\n\n    onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({\n      route: route\n    }, closing);\n  };\n\n  var insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft\n  };\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var _React$useState = React.useState('box-none'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      pointerEvents = _React$useState2[0],\n      setPointerEvents = _React$useState2[1];\n\n  React.useEffect(function () {\n    var _scene$progress$next, _scene$progress$next$;\n\n    var listener = (_scene$progress$next = scene.progress.next) === null || _scene$progress$next === void 0 ? void 0 : (_scene$progress$next$ = _scene$progress$next.addListener) === null || _scene$progress$next$ === void 0 ? void 0 : _scene$progress$next$.call(_scene$progress$next, function (_ref3) {\n      var value = _ref3.value;\n      setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n    });\n    return function () {\n      if (listener) {\n        var _scene$progress$next2, _scene$progress$next3;\n\n        (_scene$progress$next2 = scene.progress.next) === null || _scene$progress$next2 === void 0 ? void 0 : (_scene$progress$next3 = _scene$progress$next2.removeListener) === null || _scene$progress$next3 === void 0 ? void 0 : _scene$progress$next3.call(_scene$progress$next2, listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n  var _scene$descriptor$opt = scene.descriptor.options,\n      presentation = _scene$descriptor$opt.presentation,\n      animationEnabled = _scene$descriptor$opt.animationEnabled,\n      cardOverlay = _scene$descriptor$opt.cardOverlay,\n      cardOverlayEnabled = _scene$descriptor$opt.cardOverlayEnabled,\n      cardShadowEnabled = _scene$descriptor$opt.cardShadowEnabled,\n      cardStyle = _scene$descriptor$opt.cardStyle,\n      cardStyleInterpolator = _scene$descriptor$opt.cardStyleInterpolator,\n      gestureDirection = _scene$descriptor$opt.gestureDirection,\n      gestureEnabled = _scene$descriptor$opt.gestureEnabled,\n      gestureResponseDistance = _scene$descriptor$opt.gestureResponseDistance,\n      gestureVelocityImpact = _scene$descriptor$opt.gestureVelocityImpact,\n      headerMode = _scene$descriptor$opt.headerMode,\n      headerShown = _scene$descriptor$opt.headerShown,\n      transitionSpec = _scene$descriptor$opt.transitionSpec;\n  var previousScene = getPreviousScene({\n    route: scene.descriptor.route\n  });\n  var backTitle;\n\n  if (previousScene) {\n    var _previousScene$descri = previousScene.descriptor,\n        options = _previousScene$descri.options,\n        route = _previousScene$descri.route;\n    backTitle = getHeaderTitle(options, route.name);\n  }\n\n  var headerBack = React.useMemo(function () {\n    return backTitle !== undefined ? {\n      title: backTitle\n    } : undefined;\n  }, [backTitle]);\n  return React.createElement(Card, {\n    interpolationIndex: interpolationIndex,\n    gestureDirection: gestureDirection,\n    layout: layout,\n    insets: insets,\n    gesture: gesture,\n    current: scene.progress.current,\n    next: scene.progress.next,\n    closing: closing,\n    onOpen: handleOpen,\n    onClose: handleClose,\n    overlay: cardOverlay,\n    overlayEnabled: cardOverlayEnabled,\n    shadowEnabled: cardShadowEnabled,\n    onTransition: handleTransition,\n    onGestureBegin: handleGestureBegin,\n    onGestureCanceled: handleGestureCanceled,\n    onGestureEnd: handleGestureEnd,\n    gestureEnabled: index === 0 ? false : gestureEnabled,\n    gestureResponseDistance: gestureResponseDistance,\n    gestureVelocityImpact: gestureVelocityImpact,\n    transitionSpec: transitionSpec,\n    styleInterpolator: cardStyleInterpolator,\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    pointerEvents: active ? 'box-none' : pointerEvents,\n    pageOverflowEnabled: headerMode !== 'float' && presentation !== 'modal',\n    headerDarkContent: headerDarkContent,\n    containerStyle: hasAbsoluteFloatHeader && headerMode !== 'screen' ? {\n      marginTop: headerHeight\n    } : null,\n    contentStyle: [{\n      backgroundColor: presentation === 'transparentModal' ? 'transparent' : colors.background\n    }, cardStyle],\n    style: [{\n      overflow: active ? undefined : 'hidden',\n      display: animationEnabled === false && isNextScreenTransparent === false && detachCurrentScreen !== false && !focused ? 'none' : 'flex'\n    }, StyleSheet.absoluteFill]\n  }, React.createElement(View, {\n    style: styles.container\n  }, React.createElement(ModalPresentationContext.Provider, {\n    value: modal\n  }, React.createElement(View, {\n    style: styles.scene\n  }, React.createElement(HeaderBackContext.Provider, {\n    value: headerBack\n  }, React.createElement(HeaderShownContext.Provider, {\n    value: isParentHeaderShown || headerShown !== false\n  }, React.createElement(HeaderHeightContext.Provider, {\n    value: headerShown ? headerHeight : parentHeaderHeight !== null && parentHeaderHeight !== void 0 ? parentHeaderHeight : 0\n  }, renderScene({\n    route: scene.descriptor.route\n  }))))), headerMode !== 'float' ? renderHeader({\n    mode: 'screen',\n    layout: layout,\n    scenes: [previousScene, scene],\n    getPreviousScene: getPreviousScene,\n    getFocusedRoute: getFocusedRoute,\n    onContentHeightChange: onHeaderHeightChange\n  }) : null)));\n}\n\nexport default React.memo(CardContainer);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse'\n  },\n  scene: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["getHeaderTitle","HeaderBackContext","HeaderHeightContext","HeaderShownContext","useTheme","React","ModalPresentationContext","useKeyboardManager","Card","EPSILON","CardContainer","interpolationIndex","index","active","closing","gesture","focused","modal","getPreviousScene","getFocusedRoute","headerDarkContent","hasAbsoluteFloatHeader","headerHeight","onHeaderHeightChange","isParentHeaderShown","isNextScreenTransparent","detachCurrentScreen","layout","onCloseRoute","onOpenRoute","onGestureCancel","onGestureEnd","onGestureStart","onTransitionEnd","onTransitionStart","renderHeader","renderScene","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","parentHeaderHeight","useContext","useCallback","descriptor","options","navigation","isFocused","keyboardHandlingEnabled","onPageChangeStart","onPageChangeCancel","onPageChangeConfirm","handleOpen","route","handleClose","handleGestureBegin","handleGestureCanceled","handleGestureEnd","handleTransition","insets","top","right","bottom","left","colors","useState","pointerEvents","setPointerEvents","useEffect","listener","progress","next","_scene$progress$next","addListener","_scene$progress$next$","value","removeListener","presentation","animationEnabled","cardOverlay","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","headerMode","headerShown","transitionSpec","previousScene","backTitle","name","headerBack","useMemo","undefined","title","current","onOpen","onClose","overlay","overlayEnabled","shadowEnabled","onTransition","onGestureBegin","onGestureCanceled","styleInterpolator","accessibilityElementsHidden","importantForAccessibility","pageOverflowEnabled","containerStyle","marginTop","contentStyle","backgroundColor","background","style","overflow","display","StyleSheet","absoluteFill","View","styles","container","Provider","mode","scenes","onContentHeightChange","memo","create","flex","flexDirection"],"sources":["CardContainer.tsx"],"sourcesContent":["import {\n  getHeaderTitle,\n  HeaderBackContext,\n  HeaderHeightContext,\n  HeaderShownContext,\n} from '@react-navigation/elements';\nimport { Route, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\n\nimport type { Layout, Scene } from '../../types';\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport useKeyboardManager from '../../utils/useKeyboardManager';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\n\ntype Props = {\n  interpolationIndex: number;\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  modal: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  scene: Scene;\n  headerDarkContent: boolean | undefined;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  getPreviousScene: (props: { route: Route<string> }) => Scene | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  hasAbsoluteFloatHeader: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  isParentHeaderShown: boolean;\n  isNextScreenTransparent: boolean;\n  detachCurrentScreen: boolean;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  interpolationIndex,\n  index,\n  active,\n  closing,\n  gesture,\n  focused,\n  modal,\n  getPreviousScene,\n  getFocusedRoute,\n  headerDarkContent,\n  hasAbsoluteFloatHeader,\n  headerHeight,\n  onHeaderHeightChange,\n  isParentHeaderShown,\n  isNextScreenTransparent,\n  detachCurrentScreen,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onGestureCancel,\n  onGestureEnd,\n  onGestureStart,\n  onTransitionEnd,\n  onTransitionStart,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n}: Props) {\n  const parentHeaderHeight = React.useContext(HeaderHeightContext);\n\n  const { onPageChangeStart, onPageChangeCancel, onPageChangeConfirm } =\n    useKeyboardManager(\n      React.useCallback(() => {\n        const { options, navigation } = scene.descriptor;\n\n        return (\n          navigation.isFocused() && options.keyboardHandlingEnabled !== false\n        );\n      }, [scene.descriptor])\n    );\n\n  const handleOpen = () => {\n    const { route } = scene.descriptor;\n\n    onTransitionEnd({ route }, false);\n    onOpenRoute({ route });\n  };\n\n  const handleClose = () => {\n    const { route } = scene.descriptor;\n\n    onTransitionEnd({ route }, true);\n    onCloseRoute({ route });\n  };\n\n  const handleGestureBegin = () => {\n    const { route } = scene.descriptor;\n\n    onPageChangeStart();\n    onGestureStart({ route });\n  };\n\n  const handleGestureCanceled = () => {\n    const { route } = scene.descriptor;\n\n    onPageChangeCancel();\n    onGestureCancel({ route });\n  };\n\n  const handleGestureEnd = () => {\n    const { route } = scene.descriptor;\n\n    onGestureEnd({ route });\n  };\n\n  const handleTransition = ({\n    closing,\n    gesture,\n  }: {\n    closing: boolean;\n    gesture: boolean;\n  }) => {\n    const { route } = scene.descriptor;\n\n    if (!gesture) {\n      onPageChangeConfirm?.(true);\n    } else if (active && closing) {\n      onPageChangeConfirm?.(false);\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\n    'box-none'\n  );\n\n  React.useEffect(() => {\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  const {\n    presentation,\n    animationEnabled,\n    cardOverlay,\n    cardOverlayEnabled,\n    cardShadowEnabled,\n    cardStyle,\n    cardStyleInterpolator,\n    gestureDirection,\n    gestureEnabled,\n    gestureResponseDistance,\n    gestureVelocityImpact,\n    headerMode,\n    headerShown,\n    transitionSpec,\n  } = scene.descriptor.options;\n\n  const previousScene = getPreviousScene({ route: scene.descriptor.route });\n\n  let backTitle: string | undefined;\n\n  if (previousScene) {\n    const { options, route } = previousScene.descriptor;\n\n    backTitle = getHeaderTitle(options, route.name);\n  }\n\n  const headerBack = React.useMemo(\n    () => (backTitle !== undefined ? { title: backTitle } : undefined),\n    [backTitle]\n  );\n\n  return (\n    <Card\n      interpolationIndex={interpolationIndex}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlay={cardOverlay}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransition={handleTransition}\n      onGestureBegin={handleGestureBegin}\n      onGestureCanceled={handleGestureCanceled}\n      onGestureEnd={handleGestureEnd}\n      gestureEnabled={index === 0 ? false : gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      pageOverflowEnabled={headerMode !== 'float' && presentation !== 'modal'}\n      headerDarkContent={headerDarkContent}\n      containerStyle={\n        hasAbsoluteFloatHeader && headerMode !== 'screen'\n          ? { marginTop: headerHeight }\n          : null\n      }\n      contentStyle={[\n        {\n          backgroundColor:\n            presentation === 'transparentModal'\n              ? 'transparent'\n              : colors.background,\n        },\n        cardStyle,\n      ]}\n      style={[\n        {\n          // This is necessary to avoid unfocused larger pages increasing scroll area\n          // The issue can be seen on the web when a smaller screen is pushed over a larger one\n          overflow: active ? undefined : 'hidden',\n          display:\n            // Hide unfocused screens when animation isn't enabled\n            // This is also necessary for a11y on web\n            animationEnabled === false &&\n            isNextScreenTransparent === false &&\n            detachCurrentScreen !== false &&\n            !focused\n              ? 'none'\n              : 'flex',\n        },\n        StyleSheet.absoluteFill,\n      ]}\n    >\n      <View style={styles.container}>\n        <ModalPresentationContext.Provider value={modal}>\n          <View style={styles.scene}>\n            <HeaderBackContext.Provider value={headerBack}>\n              <HeaderShownContext.Provider\n                value={isParentHeaderShown || headerShown !== false}\n              >\n                <HeaderHeightContext.Provider\n                  value={headerShown ? headerHeight : parentHeaderHeight ?? 0}\n                >\n                  {renderScene({ route: scene.descriptor.route })}\n                </HeaderHeightContext.Provider>\n              </HeaderShownContext.Provider>\n            </HeaderBackContext.Provider>\n          </View>\n          {headerMode !== 'float'\n            ? renderHeader({\n                mode: 'screen',\n                layout,\n                scenes: [previousScene, scene],\n                getPreviousScene,\n                getFocusedRoute,\n                onContentHeightChange: onHeaderHeightChange,\n              })\n            : null}\n        </ModalPresentationContext.Provider>\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}