{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { getStatusBarHeight, getBottomSpace } from 'react-native-iphone-x-helper';\nimport Surface from \"./Surface\";\nimport { useTheme } from \"../core/theming\";\nimport useAnimatedValue from \"../utils/useAnimatedValue\";\nvar DEFAULT_DURATION = 220;\nvar TOP_INSET = getStatusBarHeight(true);\nvar BOTTOM_INSET = getBottomSpace();\nexport default function Modal(_ref) {\n  var _ref$dismissable = _ref.dismissable,\n      dismissable = _ref$dismissable === void 0 ? true : _ref$dismissable,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? false : _ref$visible,\n      _ref$overlayAccessibi = _ref.overlayAccessibilityLabel,\n      overlayAccessibilityLabel = _ref$overlayAccessibi === void 0 ? 'Close modal' : _ref$overlayAccessibi,\n      onDismiss = _ref.onDismiss,\n      children = _ref.children,\n      contentContainerStyle = _ref.contentContainerStyle,\n      style = _ref.style;\n  var visibleRef = React.useRef(visible);\n  React.useEffect(function () {\n    visibleRef.current = visible;\n  });\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors,\n      animation = _useTheme.animation;\n\n  var opacity = useAnimatedValue(visible ? 1 : 0);\n\n  var _React$useState = React.useState(visible),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      rendered = _React$useState2[0],\n      setRendered = _React$useState2[1];\n\n  if (visible && !rendered) {\n    setRendered(true);\n  }\n\n  var handleBack = function handleBack() {\n    if (dismissable) {\n      hideModal();\n    }\n\n    return true;\n  };\n\n  var subscription = React.useRef(undefined);\n\n  var showModal = function showModal() {\n    var _subscription$current;\n\n    if ((_subscription$current = subscription.current) !== null && _subscription$current !== void 0 && _subscription$current.remove) {\n      subscription.current.remove();\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', handleBack);\n    }\n\n    subscription.current = BackHandler.addEventListener('hardwareBackPress', handleBack);\n    var scale = animation.scale;\n    Animated.timing(opacity, {\n      toValue: 1,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true\n    }).start();\n  };\n\n  var hideModal = function hideModal() {\n    var _subscription$current2;\n\n    if ((_subscription$current2 = subscription.current) !== null && _subscription$current2 !== void 0 && _subscription$current2.remove) {\n      var _subscription$current3;\n\n      (_subscription$current3 = subscription.current) === null || _subscription$current3 === void 0 ? void 0 : _subscription$current3.remove();\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', handleBack);\n    }\n\n    var scale = animation.scale;\n    Animated.timing(opacity, {\n      toValue: 0,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true\n    }).start(function (_ref2) {\n      var finished = _ref2.finished;\n\n      if (!finished) {\n        return;\n      }\n\n      if (visible && onDismiss) {\n        onDismiss();\n      }\n\n      if (visibleRef.current) {\n        showModal();\n      } else {\n        setRendered(false);\n      }\n    });\n  };\n\n  var prevVisible = React.useRef(null);\n  React.useEffect(function () {\n    if (prevVisible.current !== visible) {\n      if (visible) {\n        showModal();\n      } else {\n        hideModal();\n      }\n    }\n\n    prevVisible.current = visible;\n  });\n  if (!rendered) return null;\n  return React.createElement(Animated.View, {\n    pointerEvents: visible ? 'auto' : 'none',\n    accessibilityViewIsModal: true,\n    accessibilityLiveRegion: \"polite\",\n    style: StyleSheet.absoluteFill,\n    onAccessibilityEscape: hideModal\n  }, React.createElement(TouchableWithoutFeedback, {\n    accessibilityLabel: overlayAccessibilityLabel,\n    accessibilityRole: \"button\",\n    disabled: !dismissable,\n    onPress: dismissable ? hideModal : undefined,\n    importantForAccessibility: \"no\"\n  }, React.createElement(Animated.View, {\n    style: [styles.backdrop, {\n      backgroundColor: colors.backdrop,\n      opacity: opacity\n    }]\n  })), React.createElement(View, {\n    style: [styles.wrapper, {\n      marginTop: TOP_INSET,\n      marginBottom: BOTTOM_INSET\n    }, style],\n    pointerEvents: \"box-none\"\n  }, React.createElement(Surface, {\n    style: [{\n      opacity: opacity\n    }, styles.content, contentContainerStyle]\n  }, children)));\n}\nvar styles = StyleSheet.create({\n  backdrop: {\n    flex: 1\n  },\n  wrapper: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    justifyContent: 'center'\n  }),\n  content: {\n    backgroundColor: 'transparent',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"mappings":";;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;;;AAYA,SACEC,kBADF,EAEEC,cAFF,QAGO,8BAHP;AAIA,OAAOC,OAAP;AACA,SAASC,QAAT;AACA,OAAOC,gBAAP;AAkCA,IAAMC,gBAAgB,GAAG,GAAzB;AACA,IAAMC,SAAS,GAAGN,kBAAkB,CAAC,IAAD,CAApC;AACA,IAAMO,YAAY,GAAGN,cAAc,EAAnC;AAyCA,eAAe,SAASO,KAAT,OAQL;AAAA,8BAPRC,WAOQ;AAAA,MAPRA,WAOQ,iCAPM,IAON;AAAA,0BANRC,OAMQ;AAAA,MANRA,OAMQ,6BANE,KAMF;AAAA,mCALRC,yBAKQ;AAAA,MALRA,yBAKQ,sCALoB,aAKpB;AAAA,MAJRC,SAIQ,QAJRA,SAIQ;AAAA,MAHRC,QAGQ,QAHRA,QAGQ;AAAA,MAFRC,qBAEQ,QAFRA,qBAEQ;AAAA,MADRC,KACQ,QADRA,KACQ;AACR,MAAMC,UAAU,GAAGjB,KAAK,CAACkB,MAANlB,CAAaW,OAAbX,CAAnB;AAEAA,OAAK,CAACmB,SAANnB,CAAgB,YAAM;AACpBiB,cAAU,CAACG,OAAXH,GAAqBN,OAArBM;AADF;;AAIA,kBAA8Bb,QAAQ,EAAtC;AAAA,MAAQiB,MAAR,aAAQA,MAAR;AAAA,MAAgBC,SAAhB,aAAgBA,SAAhB;;AAEA,MAAMC,OAAO,GAAGlB,gBAAgB,CAACM,OAAO,GAAG,CAAH,GAAO,CAAf,CAAhC;;AAEA,wBAAgCX,KAAK,CAACwB,QAANxB,CAAeW,OAAfX,CAAhC;AAAA;AAAA,MAAOyB,QAAP;AAAA,MAAiBC,WAAjB;;AAEA,MAAIf,OAAO,IAAI,CAACc,QAAhB,EAA0B;AACxBC,eAAW,CAAC,IAAD,CAAXA;AACD;;AAED,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,QAAIjB,WAAJ,EAAiB;AACfkB,eAAS;AACV;;AACD,WAAO,IAAP;AAJF;;AAOA,MAAMC,YAAY,GAAG7B,KAAK,CAACkB,MAANlB,CACnB8B,SADmB9B,CAArB;;AAIA,MAAM+B,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA;;AACtB,iCAAIF,YAAY,CAACT,OAAjB,kDAAIY,sBAAsBC,MAA1B,EAAkC;AAChCJ,kBAAY,CAACT,OAAbS,CAAqBI,MAArBJ;AADF,WAEO;AACLK,iBAAW,CAACC,mBAAZD,CAAgC,mBAAhCA,EAAqDP,UAArDO;AACD;;AACDL,gBAAY,CAACT,OAAbS,GAAuBK,WAAW,CAACE,gBAAZF,CACrB,mBADqBA,EAErBP,UAFqBO,CAAvBL;AAKA,QAAQQ,KAAR,GAAkBf,SAAlB,CAAQe,KAAR;AAEAC,YAAQ,CAACC,MAATD,CAAgBf,OAAhBe,EAAyB;AACvBE,aAAO,EAAE,CADc;AAEvBC,cAAQ,EAAEJ,KAAK,GAAG/B,gBAFK;AAGvBoC,YAAM,EAAEC,MAAM,CAACC,GAAPD,CAAWA,MAAM,CAACE,KAAlBF,CAHe;AAIvBG,qBAAe,EAAE;AAJM,KAAzBR,EAKGS,KALHT;AAbF;;AAqBA,MAAMV,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA;;AACtB,kCAAIC,YAAY,CAACT,OAAjB,mDAAI4B,uBAAsBf,MAA1B,EAAkC;AAAA;;AAChC,4CAAY,CAACb,OAAb,kFAAsBa,MAAtB;AADF,WAEO;AACLC,iBAAW,CAACC,mBAAZD,CAAgC,mBAAhCA,EAAqDP,UAArDO;AACD;;AAED,QAAQG,KAAR,GAAkBf,SAAlB,CAAQe,KAAR;AAEAC,YAAQ,CAACC,MAATD,CAAgBf,OAAhBe,EAAyB;AACvBE,aAAO,EAAE,CADc;AAEvBC,cAAQ,EAAEJ,KAAK,GAAG/B,gBAFK;AAGvBoC,YAAM,EAAEC,MAAM,CAACC,GAAPD,CAAWA,MAAM,CAACE,KAAlBF,CAHe;AAIvBG,qBAAe,EAAE;AAJM,KAAzBR,EAKGS,KALHT,CAKS,iBAAkB;AAAA,UAAfW,QAAe,SAAfA,QAAe;;AACzB,UAAI,CAACA,QAAL,EAAe;AACb;AACD;;AAED,UAAItC,OAAO,IAAIE,SAAf,EAA0B;AACxBA,iBAAS;AACV;;AAED,UAAII,UAAU,CAACG,OAAf,EAAwB;AACtBW,iBAAS;AADX,aAEO;AACLL,mBAAW,CAAC,KAAD,CAAXA;AACD;AAlBH;AATF;;AA+BA,MAAMwB,WAAW,GAAGlD,KAAK,CAACkB,MAANlB,CAA6B,IAA7BA,CAApB;AAEAA,OAAK,CAACmB,SAANnB,CAAgB,YAAM;AACpB,QAAIkD,WAAW,CAAC9B,OAAZ8B,KAAwBvC,OAA5B,EAAqC;AACnC,UAAIA,OAAJ,EAAa;AACXoB,iBAAS;AADX,aAEO;AACLH,iBAAS;AACV;AACF;;AACDsB,eAAW,CAAC9B,OAAZ8B,GAAsBvC,OAAtBuC;AARF;AAWA,MAAI,CAACzB,QAAL,EAAe,OAAO,IAAP;AAEf,SACEzB,oBAACsC,QAAD,CAAUa,IAAV;AACEC,iBAAa,EAAEzC,OAAO,GAAG,MAAH,GAAY,MADpC;AAEE0C,4BAAwB,MAF1B;AAGEC,2BAAuB,EAAC,QAH1B;AAIEtC,SAAK,EAAEuC,UAAU,CAACC,YAJpB;AAKEC,yBAAqB,EAAE7B;AALzB,KAOE5B,oBAAC0D,wBAAD;AACEC,sBAAkB,EAAE/C,yBADtB;AAEEgD,qBAAiB,EAAC,QAFpB;AAGEC,YAAQ,EAAE,CAACnD,WAHb;AAIEoD,WAAO,EAAEpD,WAAW,GAAGkB,SAAH,GAAeE,SAJrC;AAKEiC,6BAAyB,EAAC;AAL5B,KAOE/D,oBAACsC,QAAD,CAAUa,IAAV;AACEnC,SAAK,EAAE,CACLgD,MAAM,CAACC,QADF,EAEL;AAAEC,qBAAe,EAAE7C,MAAM,CAAC4C,QAA1B;AAAoC1C;AAApC,KAFK;AADT,IAPF,CAPF,EAqBEvB,oBAACmD,IAAD;AACEnC,SAAK,EAAE,CACLgD,MAAM,CAACG,OADF,EAEL;AAAEC,eAAS,EAAE7D,SAAb;AAAwB8D,kBAAY,EAAE7D;AAAtC,KAFK,EAGLQ,KAHK,CADT;AAMEoC,iBAAa,EAAC;AANhB,KAQEpD,oBAACG,OAAD;AACEa,SAAK,EACH,CAAC;AAAEO;AAAF,KAAD,EAAcyC,MAAM,CAACM,OAArB,EAA8BvD,qBAA9B;AAFJ,KAOGD,QAPH,CARF,CArBF,CADF;AA0CD;AAED,IAAMkD,MAAM,GAAGT,UAAU,CAACgB,MAAXhB,CAAkB;AAC/BU,UAAQ,EAAE;AACRO,QAAI,EAAE;AADE,GADqB;AAI/BL,SAAO,kCACFZ,UAAU,CAACkB,kBADT;AAELC,kBAAc,EAAE;AAFX,IAJwB;AAQ/BJ,SAAO,EAAE;AACPJ,mBAAe,EAAE,aADV;AAEPQ,kBAAc,EAAE;AAFT;AARsB,CAAlBnB,CAAf","names":["React","getStatusBarHeight","getBottomSpace","Surface","useTheme","useAnimatedValue","DEFAULT_DURATION","TOP_INSET","BOTTOM_INSET","Modal","dismissable","visible","overlayAccessibilityLabel","onDismiss","children","contentContainerStyle","style","visibleRef","useRef","useEffect","current","colors","animation","opacity","useState","rendered","setRendered","handleBack","hideModal","subscription","undefined","showModal","_subscription$current","remove","BackHandler","removeEventListener","addEventListener","scale","Animated","timing","toValue","duration","easing","Easing","out","cubic","useNativeDriver","start","_subscription$current2","finished","prevVisible","View","pointerEvents","accessibilityViewIsModal","accessibilityLiveRegion","StyleSheet","absoluteFill","onAccessibilityEscape","TouchableWithoutFeedback","accessibilityLabel","accessibilityRole","disabled","onPress","importantForAccessibility","styles","backdrop","backgroundColor","wrapper","marginTop","marginBottom","content","create","flex","absoluteFillObject","justifyContent"],"sources":["Modal.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  BackHandler,\n  Easing,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  ViewStyle,\n  View,\n  NativeEventSubscription,\n} from 'react-native';\nimport {\n  getStatusBarHeight,\n  getBottomSpace,\n} from 'react-native-iphone-x-helper';\nimport Surface from './Surface';\nimport { useTheme } from '../core/theming';\nimport useAnimatedValue from '../utils/useAnimatedValue';\n\ntype Props = {\n  /**\n   * Determines whether clicking outside the modal dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the modal.\n   */\n  onDismiss?: () => void;\n  /**\n   * Accessibility label for the overlay. This is read by the screen reader when the user taps outside the modal.\n   */\n  overlayAccessibilityLabel?: string;\n  /**\n   * Determines Whether the modal is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Modal`.\n   */\n  children: React.ReactNode;\n  /**\n   * Style for the content of the modal\n   */\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  /**\n   * Style for the wrapper of the modal.\n   * Use this prop to change the default wrapper style or to override safe area insets with marginTop and marginBottom.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nconst DEFAULT_DURATION = 220;\nconst TOP_INSET = getStatusBarHeight(true);\nconst BOTTOM_INSET = getBottomSpace();\n\n/**\n * The Modal component is a simple way to present content above an enclosing view.\n * To render the `Modal` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/modal.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Modal, Portal, Text, Button, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showModal = () => setVisible(true);\n *   const hideModal = () => setVisible(false);\n *   const containerStyle = {backgroundColor: 'white', padding: 20};\n *\n *   return (\n *     <Provider>\n *       <Portal>\n *         <Modal visible={visible} onDismiss={hideModal} contentContainerStyle={containerStyle}>\n *           <Text>Example Modal.  Click outside this area to dismiss.</Text>\n *         </Modal>\n *       </Portal>\n *       <Button style={{marginTop: 30}} onPress={showModal}>\n *         Show\n *       </Button>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nexport default function Modal({\n  dismissable = true,\n  visible = false,\n  overlayAccessibilityLabel = 'Close modal',\n  onDismiss,\n  children,\n  contentContainerStyle,\n  style,\n}: Props) {\n  const visibleRef = React.useRef(visible);\n\n  React.useEffect(() => {\n    visibleRef.current = visible;\n  });\n\n  const { colors, animation } = useTheme();\n\n  const opacity = useAnimatedValue(visible ? 1 : 0);\n\n  const [rendered, setRendered] = React.useState(visible);\n\n  if (visible && !rendered) {\n    setRendered(true);\n  }\n\n  const handleBack = () => {\n    if (dismissable) {\n      hideModal();\n    }\n    return true;\n  };\n\n  const subscription = React.useRef<NativeEventSubscription | undefined>(\n    undefined\n  );\n\n  const showModal = () => {\n    if (subscription.current?.remove) {\n      subscription.current.remove();\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', handleBack);\n    }\n    subscription.current = BackHandler.addEventListener(\n      'hardwareBackPress',\n      handleBack\n    );\n\n    const { scale } = animation;\n\n    Animated.timing(opacity, {\n      toValue: 1,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const hideModal = () => {\n    if (subscription.current?.remove) {\n      subscription.current?.remove();\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', handleBack);\n    }\n\n    const { scale } = animation;\n\n    Animated.timing(opacity, {\n      toValue: 0,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (!finished) {\n        return;\n      }\n\n      if (visible && onDismiss) {\n        onDismiss();\n      }\n\n      if (visibleRef.current) {\n        showModal();\n      } else {\n        setRendered(false);\n      }\n    });\n  };\n\n  const prevVisible = React.useRef<boolean | null>(null);\n\n  React.useEffect(() => {\n    if (prevVisible.current !== visible) {\n      if (visible) {\n        showModal();\n      } else {\n        hideModal();\n      }\n    }\n    prevVisible.current = visible;\n  });\n\n  if (!rendered) return null;\n\n  return (\n    <Animated.View\n      pointerEvents={visible ? 'auto' : 'none'}\n      accessibilityViewIsModal\n      accessibilityLiveRegion=\"polite\"\n      style={StyleSheet.absoluteFill}\n      onAccessibilityEscape={hideModal}\n    >\n      <TouchableWithoutFeedback\n        accessibilityLabel={overlayAccessibilityLabel}\n        accessibilityRole=\"button\"\n        disabled={!dismissable}\n        onPress={dismissable ? hideModal : undefined}\n        importantForAccessibility=\"no\"\n      >\n        <Animated.View\n          style={[\n            styles.backdrop,\n            { backgroundColor: colors.backdrop, opacity },\n          ]}\n        />\n      </TouchableWithoutFeedback>\n      <View\n        style={[\n          styles.wrapper,\n          { marginTop: TOP_INSET, marginBottom: BOTTOM_INSET },\n          style,\n        ]}\n        pointerEvents=\"box-none\"\n      >\n        <Surface\n          style={\n            [{ opacity }, styles.content, contentContainerStyle] as StyleProp<\n              ViewStyle\n            >\n          }\n        >\n          {children}\n        </Surface>\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  backdrop: {\n    flex: 1,\n  },\n  wrapper: {\n    ...StyleSheet.absoluteFillObject,\n    justifyContent: 'center',\n  },\n  content: {\n    backgroundColor: 'transparent',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}