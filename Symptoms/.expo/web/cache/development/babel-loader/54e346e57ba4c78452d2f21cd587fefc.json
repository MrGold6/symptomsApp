{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"styleInterpolator\", \"interpolationIndex\", \"current\", \"gesture\", \"next\", \"layout\", \"insets\", \"overlay\", \"overlayEnabled\", \"shadowEnabled\", \"gestureEnabled\", \"gestureDirection\", \"pageOverflowEnabled\", \"headerDarkContent\", \"children\", \"containerStyle\", \"contentStyle\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport Color from 'color';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { forModalPresentationIOS } from \"../../TransitionConfigs/CardStyleInterpolators\";\nimport CardAnimationContext from \"../../utils/CardAnimationContext\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nimport getInvertedMultiplier from \"../../utils/getInvertedMultiplier\";\nimport memoize from \"../../utils/memoize\";\nimport { GestureState, PanGestureHandler } from \"../GestureHandler\";\nimport ModalStatusBarManager from \"../ModalStatusBarManager\";\nimport CardSheet from \"./CardSheet\";\nvar GESTURE_VELOCITY_IMPACT = 0.3;\nvar TRUE = 1;\nvar FALSE = 0;\nvar GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nvar GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\nvar useNativeDriver = Platform.OS !== 'web';\n\nvar hasOpacityStyle = function hasOpacityStyle(style) {\n  if (style) {\n    var flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n\n  return false;\n};\n\nvar Card = function (_React$Component) {\n  _inherits(Card, _React$Component);\n\n  var _super = _createSuper(Card);\n\n  function Card() {\n    var _this;\n\n    _classCallCheck(this, Card);\n\n    _this = _super.apply(this, arguments);\n\n    _defineProperty(_assertThisInitialized(_this), \"isCurrentlyMounted\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"isClosing\", new Animated.Value(FALSE));\n\n    _defineProperty(_assertThisInitialized(_this), \"inverted\", new Animated.Value(getInvertedMultiplier(_this.props.gestureDirection)));\n\n    _defineProperty(_assertThisInitialized(_this), \"layout\", {\n      width: new Animated.Value(_this.props.layout.width),\n      height: new Animated.Value(_this.props.layout.height)\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isSwiping\", new Animated.Value(FALSE));\n\n    _defineProperty(_assertThisInitialized(_this), \"interactionHandle\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"pendingGestureCallback\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"lastToValue\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"animate\", function (_ref) {\n      var closing = _ref.closing,\n          velocity = _ref.velocity;\n      var _this$props = _this.props,\n          gesture = _this$props.gesture,\n          transitionSpec = _this$props.transitionSpec,\n          onOpen = _this$props.onOpen,\n          onClose = _this$props.onClose,\n          onTransition = _this$props.onTransition;\n\n      var toValue = _this.getAnimateToValue(_objectSpread(_objectSpread({}, _this.props), {}, {\n        closing: closing\n      }));\n\n      _this.lastToValue = toValue;\n\n      _this.isClosing.setValue(closing ? TRUE : FALSE);\n\n      var spec = closing ? transitionSpec.close : transitionSpec.open;\n      var animation = spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n      _this.setPointerEventsEnabled(!closing);\n\n      _this.handleStartInteraction();\n\n      clearTimeout(_this.pendingGestureCallback);\n      onTransition === null || onTransition === void 0 ? void 0 : onTransition({\n        closing: closing,\n        gesture: velocity !== undefined\n      });\n      animation(gesture, _objectSpread(_objectSpread({}, spec.config), {}, {\n        velocity: velocity,\n        toValue: toValue,\n        useNativeDriver: useNativeDriver,\n        isInteraction: false\n      })).start(function (_ref2) {\n        var finished = _ref2.finished;\n\n        _this.handleEndInteraction();\n\n        clearTimeout(_this.pendingGestureCallback);\n\n        if (finished) {\n          if (closing) {\n            onClose();\n          } else {\n            onOpen();\n          }\n\n          if (_this.isCurrentlyMounted) {\n            _this.forceUpdate();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getAnimateToValue\", function (_ref3) {\n      var closing = _ref3.closing,\n          layout = _ref3.layout,\n          gestureDirection = _ref3.gestureDirection;\n\n      if (!closing) {\n        return 0;\n      }\n\n      return getDistanceForDirection(layout, gestureDirection);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setPointerEventsEnabled\", function (enabled) {\n      var _this$contentRef$curr;\n\n      var pointerEvents = enabled ? 'box-none' : 'none';\n      (_this$contentRef$curr = _this.contentRef.current) === null || _this$contentRef$curr === void 0 ? void 0 : _this$contentRef$curr.setNativeProps({\n        pointerEvents: pointerEvents\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStartInteraction\", function () {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEndInteraction\", function () {\n      if (_this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(_this.interactionHandle);\n        _this.interactionHandle = undefined;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureStateChange\", function (_ref4) {\n      var nativeEvent = _ref4.nativeEvent;\n      var _this$props2 = _this.props,\n          layout = _this$props2.layout,\n          onClose = _this$props2.onClose,\n          onGestureBegin = _this$props2.onGestureBegin,\n          onGestureCanceled = _this$props2.onGestureCanceled,\n          onGestureEnd = _this$props2.onGestureEnd,\n          gestureDirection = _this$props2.gestureDirection,\n          gestureVelocityImpact = _this$props2.gestureVelocityImpact;\n\n      switch (nativeEvent.state) {\n        case GestureState.ACTIVE:\n          _this.isSwiping.setValue(TRUE);\n\n          _this.handleStartInteraction();\n\n          onGestureBegin === null || onGestureBegin === void 0 ? void 0 : onGestureBegin();\n          break;\n\n        case GestureState.CANCELLED:\n          {\n            _this.isSwiping.setValue(FALSE);\n\n            _this.handleEndInteraction();\n\n            var velocity = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? nativeEvent.velocityY : nativeEvent.velocityX;\n\n            _this.animate({\n              closing: _this.props.closing,\n              velocity: velocity\n            });\n\n            onGestureCanceled === null || onGestureCanceled === void 0 ? void 0 : onGestureCanceled();\n            break;\n          }\n\n        case GestureState.END:\n          {\n            _this.isSwiping.setValue(FALSE);\n\n            var distance;\n            var translation;\n\n            var _velocity;\n\n            if (gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted') {\n              distance = layout.height;\n              translation = nativeEvent.translationY;\n              _velocity = nativeEvent.velocityY;\n            } else {\n              distance = layout.width;\n              translation = nativeEvent.translationX;\n              _velocity = nativeEvent.velocityX;\n            }\n\n            var closing = (translation + _velocity * gestureVelocityImpact) * getInvertedMultiplier(gestureDirection) > distance / 2 ? _velocity !== 0 || translation !== 0 : _this.props.closing;\n\n            _this.animate({\n              closing: closing,\n              velocity: _velocity\n            });\n\n            if (closing) {\n              _this.pendingGestureCallback = setTimeout(function () {\n                onClose();\n\n                _this.forceUpdate();\n              }, 32);\n            }\n\n            onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd();\n            break;\n          }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getInterpolatedStyle\", memoize(function (styleInterpolator, animation) {\n      return styleInterpolator(animation);\n    }));\n\n    _defineProperty(_assertThisInitialized(_this), \"getCardAnimation\", memoize(function (interpolationIndex, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) {\n      return {\n        index: interpolationIndex,\n        current: {\n          progress: current\n        },\n        next: next && {\n          progress: next\n        },\n        closing: _this.isClosing,\n        swiping: _this.isSwiping,\n        inverted: _this.inverted,\n        layouts: {\n          screen: layout\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft\n        }\n      };\n    }));\n\n    _defineProperty(_assertThisInitialized(_this), \"contentRef\", React.createRef());\n\n    return _this;\n  }\n\n  _createClass(Card, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.animate({\n        closing: this.props.closing\n      });\n      this.isCurrentlyMounted = true;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n          layout = _this$props3.layout,\n          gestureDirection = _this$props3.gestureDirection,\n          closing = _this$props3.closing;\n      var width = layout.width,\n          height = layout.height;\n\n      if (width !== prevProps.layout.width) {\n        this.layout.width.setValue(width);\n      }\n\n      if (height !== prevProps.layout.height) {\n        this.layout.height.setValue(height);\n      }\n\n      if (gestureDirection !== prevProps.gestureDirection) {\n        this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n      }\n\n      var toValue = this.getAnimateToValue(this.props);\n\n      if (this.getAnimateToValue(prevProps) !== toValue || this.lastToValue !== toValue) {\n        this.animate({\n          closing: closing\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.gesture.stopAnimation();\n      this.isCurrentlyMounted = false;\n      this.handleEndInteraction();\n    }\n  }, {\n    key: \"gestureActivationCriteria\",\n    value: function gestureActivationCriteria() {\n      var _this$props4 = this.props,\n          layout = _this$props4.layout,\n          gestureDirection = _this$props4.gestureDirection,\n          gestureResponseDistance = _this$props4.gestureResponseDistance;\n      var enableTrackpadTwoFingerGesture = true;\n      var distance = gestureResponseDistance !== undefined ? gestureResponseDistance : gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? GESTURE_RESPONSE_DISTANCE_VERTICAL : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n      if (gestureDirection === 'vertical') {\n        return {\n          maxDeltaX: 15,\n          minOffsetY: 5,\n          hitSlop: {\n            bottom: -layout.height + distance\n          },\n          enableTrackpadTwoFingerGesture: enableTrackpadTwoFingerGesture\n        };\n      } else if (gestureDirection === 'vertical-inverted') {\n        return {\n          maxDeltaX: 15,\n          minOffsetY: -5,\n          hitSlop: {\n            top: -layout.height + distance\n          },\n          enableTrackpadTwoFingerGesture: enableTrackpadTwoFingerGesture\n        };\n      } else {\n        var hitSlop = -layout.width + distance;\n        var invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n        if (invertedMultiplier === 1) {\n          return {\n            minOffsetX: 5,\n            maxDeltaY: 20,\n            hitSlop: {\n              right: hitSlop\n            },\n            enableTrackpadTwoFingerGesture: enableTrackpadTwoFingerGesture\n          };\n        } else {\n          return {\n            minOffsetX: -5,\n            maxDeltaY: 20,\n            hitSlop: {\n              left: hitSlop\n            },\n            enableTrackpadTwoFingerGesture: enableTrackpadTwoFingerGesture\n          };\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          styleInterpolator = _this$props5.styleInterpolator,\n          interpolationIndex = _this$props5.interpolationIndex,\n          current = _this$props5.current,\n          gesture = _this$props5.gesture,\n          next = _this$props5.next,\n          layout = _this$props5.layout,\n          insets = _this$props5.insets,\n          overlay = _this$props5.overlay,\n          overlayEnabled = _this$props5.overlayEnabled,\n          shadowEnabled = _this$props5.shadowEnabled,\n          gestureEnabled = _this$props5.gestureEnabled,\n          gestureDirection = _this$props5.gestureDirection,\n          pageOverflowEnabled = _this$props5.pageOverflowEnabled,\n          headerDarkContent = _this$props5.headerDarkContent,\n          children = _this$props5.children,\n          customContainerStyle = _this$props5.containerStyle,\n          contentStyle = _this$props5.contentStyle,\n          rest = _objectWithoutProperties(_this$props5, _excluded);\n\n      var interpolationProps = this.getCardAnimation(interpolationIndex, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n      var interpolatedStyle = this.getInterpolatedStyle(styleInterpolator, interpolationProps);\n      var containerStyle = interpolatedStyle.containerStyle,\n          cardStyle = interpolatedStyle.cardStyle,\n          overlayStyle = interpolatedStyle.overlayStyle,\n          shadowStyle = interpolatedStyle.shadowStyle;\n      var handleGestureEvent = gestureEnabled ? Animated.event([{\n        nativeEvent: gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? {\n          translationY: gesture\n        } : {\n          translationX: gesture\n        }\n      }], {\n        useNativeDriver: useNativeDriver\n      }) : undefined;\n\n      var _StyleSheet$flatten = StyleSheet.flatten(contentStyle || {}),\n          backgroundColor = _StyleSheet$flatten.backgroundColor;\n\n      var isTransparent = typeof backgroundColor === 'string' ? Color(backgroundColor).alpha() === 0 : false;\n      return React.createElement(CardAnimationContext.Provider, {\n        value: interpolationProps\n      }, Platform.OS === 'ios' && overlayEnabled && next && getIsModalPresentation(styleInterpolator) ? React.createElement(ModalStatusBarManager, {\n        dark: headerDarkContent,\n        layout: layout,\n        insets: insets,\n        style: cardStyle\n      }) : null, React.createElement(Animated.View, {\n        style: {\n          opacity: current\n        },\n        collapsable: false\n      }), React.createElement(View, _extends({\n        pointerEvents: \"box-none\"\n      }, rest), overlayEnabled ? React.createElement(View, {\n        pointerEvents: \"box-none\",\n        style: StyleSheet.absoluteFill\n      }, overlay({\n        style: overlayStyle\n      })) : null, React.createElement(Animated.View, {\n        style: [styles.container, containerStyle, customContainerStyle],\n        pointerEvents: \"box-none\"\n      }, React.createElement(PanGestureHandler, _extends({\n        enabled: layout.width !== 0 && gestureEnabled,\n        onGestureEvent: handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange\n      }, this.gestureActivationCriteria()), React.createElement(Animated.View, {\n        needsOffscreenAlphaCompositing: hasOpacityStyle(cardStyle),\n        style: [styles.container, cardStyle]\n      }, shadowEnabled && shadowStyle && !isTransparent ? React.createElement(Animated.View, {\n        style: [styles.shadow, gestureDirection === 'horizontal' ? [styles.shadowHorizontal, styles.shadowLeft] : gestureDirection === 'horizontal-inverted' ? [styles.shadowHorizontal, styles.shadowRight] : gestureDirection === 'vertical' ? [styles.shadowVertical, styles.shadowTop] : [styles.shadowVertical, styles.shadowBottom], {\n          backgroundColor: backgroundColor\n        }, shadowStyle],\n        pointerEvents: \"none\"\n      }) : null, React.createElement(CardSheet, {\n        ref: this.contentRef,\n        enabled: pageOverflowEnabled,\n        layout: layout,\n        style: contentStyle\n      }, children))))));\n    }\n  }]);\n\n  return Card;\n}(React.Component);\n\nexport { Card as default };\n\n_defineProperty(Card, \"defaultProps\", {\n  shadowEnabled: false,\n  gestureEnabled: true,\n  gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n  overlay: function overlay(_ref5) {\n    var style = _ref5.style;\n    return style ? React.createElement(Animated.View, {\n      pointerEvents: \"none\",\n      style: [styles.overlay, style]\n    }) : null;\n  }\n});\n\nexport var getIsModalPresentation = function getIsModalPresentation(cardStyleInterpolator) {\n  return cardStyleInterpolator === forModalPresentationIOS || cardStyleInterpolator.name === 'forModalPresentationIOS';\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000'\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: {\n      width: -1,\n      height: 1\n    }\n  },\n  shadowLeft: {\n    left: 0\n  },\n  shadowRight: {\n    right: 0\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: {\n      width: 1,\n      height: -1\n    }\n  },\n  shadowTop: {\n    top: 0\n  },\n  shadowBottom: {\n    bottom: 0\n  }\n});","map":{"version":3,"mappings":"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","names":["Color","React","forModalPresentationIOS","CardAnimationContext","getDistanceForDirection","getInvertedMultiplier","memoize","GestureState","PanGestureHandler","ModalStatusBarManager","CardSheet","GESTURE_VELOCITY_IMPACT","TRUE","FALSE","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","useNativeDriver","Platform","OS","hasOpacityStyle","style","flattenedStyle","StyleSheet","flatten","opacity","Card","_defineProperty","Animated","Value","props","gestureDirection","width","layout","height","closing","velocity","gesture","transitionSpec","onOpen","onClose","onTransition","toValue","getAnimateToValue","lastToValue","isClosing","setValue","spec","close","open","animation","spring","timing","setPointerEventsEnabled","handleStartInteraction","clearTimeout","pendingGestureCallback","undefined","config","isInteraction","start","finished","handleEndInteraction","isCurrentlyMounted","forceUpdate","enabled","pointerEvents","contentRef","current","setNativeProps","interactionHandle","InteractionManager","createInteractionHandle","clearInteractionHandle","nativeEvent","onGestureBegin","onGestureCanceled","onGestureEnd","gestureVelocityImpact","state","ACTIVE","isSwiping","CANCELLED","velocityY","velocityX","animate","END","distance","translation","translationY","translationX","setTimeout","styleInterpolator","interpolationIndex","next","insetTop","insetRight","insetBottom","insetLeft","index","progress","swiping","inverted","layouts","screen","insets","top","right","bottom","left","createRef","componentDidMount","componentDidUpdate","prevProps","componentWillUnmount","stopAnimation","gestureActivationCriteria","gestureResponseDistance","enableTrackpadTwoFingerGesture","maxDeltaX","minOffsetY","hitSlop","invertedMultiplier","minOffsetX","maxDeltaY","render","overlay","overlayEnabled","shadowEnabled","gestureEnabled","pageOverflowEnabled","headerDarkContent","children","customContainerStyle","containerStyle","contentStyle","rest","interpolationProps","getCardAnimation","interpolatedStyle","getInterpolatedStyle","cardStyle","overlayStyle","shadowStyle","handleGestureEvent","event","backgroundColor","isTransparent","alpha","Provider","value","getIsModalPresentation","dark","View","collapsable","absoluteFill","styles","container","onGestureEvent","onHandlerStateChange","handleGestureStateChange","needsOffscreenAlphaCompositing","shadow","shadowHorizontal","shadowLeft","shadowRight","shadowVertical","shadowTop","shadowBottom","ref","Component","cardStyleInterpolator","name","create","flex","position","shadowRadius","shadowColor","shadowOpacity","shadowOffset"],"sources":["Card.tsx"],"sourcesContent":["import Color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  InteractionManager,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewProps,\n  ViewStyle,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport { forModalPresentationIOS } from '../../TransitionConfigs/CardStyleInterpolators';\nimport type {\n  GestureDirection,\n  Layout,\n  StackCardInterpolationProps,\n  StackCardStyleInterpolator,\n  TransitionSpec,\n} from '../../types';\nimport CardAnimationContext from '../../utils/CardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nimport {\n  GestureState,\n  PanGestureHandler,\n  PanGestureHandlerGestureEvent,\n} from '../GestureHandler';\nimport ModalStatusBarManager from '../ModalStatusBarManager';\nimport CardSheet from './CardSheet';\n\ntype Props = ViewProps & {\n  interpolationIndex: number;\n  closing: boolean;\n  next?: Animated.AnimatedInterpolation;\n  current: Animated.AnimatedInterpolation;\n  gesture: Animated.Value;\n  layout: Layout;\n  insets: EdgeInsets;\n  headerDarkContent: boolean | undefined;\n  pageOverflowEnabled: boolean;\n  gestureDirection: GestureDirection;\n  onOpen: () => void;\n  onClose: () => void;\n  onTransition: (props: { closing: boolean; gesture: boolean }) => void;\n  onGestureBegin: () => void;\n  onGestureCanceled: () => void;\n  onGestureEnd: () => void;\n  children: React.ReactNode;\n  overlay: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  overlayEnabled: boolean;\n  shadowEnabled: boolean;\n  gestureEnabled: boolean;\n  gestureResponseDistance?: number;\n  gestureVelocityImpact: number;\n  transitionSpec: {\n    open: TransitionSpec;\n    close: TransitionSpec;\n  };\n  styleInterpolator: StackCardStyleInterpolator;\n  containerStyle?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n};\n\nconst GESTURE_VELOCITY_IMPACT = 0.3;\n\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nconst hasOpacityStyle = (style: any) => {\n  if (style) {\n    const flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n\n  return false;\n};\n\nexport default class Card extends React.Component<Props> {\n  static defaultProps = {\n    shadowEnabled: false,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n    overlay: ({\n      style,\n    }: {\n      style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n    }) =>\n      style ? (\n        <Animated.View pointerEvents=\"none\" style={[styles.overlay, style]} />\n      ) : null,\n  };\n\n  componentDidMount() {\n    this.animate({ closing: this.props.closing });\n    this.isCurrentlyMounted = true;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { layout, gestureDirection, closing } = this.props;\n    const { width, height } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n\n    const toValue = this.getAnimateToValue(this.props);\n\n    if (\n      this.getAnimateToValue(prevProps) !== toValue ||\n      this.lastToValue !== toValue\n    ) {\n      // We need to trigger the animation when route was closed\n      // Thr route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({ closing });\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.gesture.stopAnimation();\n    this.isCurrentlyMounted = false;\n    this.handleEndInteraction();\n  }\n\n  private isCurrentlyMounted = false;\n\n  private isClosing = new Animated.Value(FALSE);\n\n  private inverted = new Animated.Value(\n    getInvertedMultiplier(this.props.gestureDirection)\n  );\n\n  private layout = {\n    width: new Animated.Value(this.props.layout.width),\n    height: new Animated.Value(this.props.layout.height),\n  };\n\n  private isSwiping = new Animated.Value(FALSE);\n\n  private interactionHandle: number | undefined;\n\n  private pendingGestureCallback: number | undefined;\n\n  private lastToValue: number | undefined;\n\n  private animate = ({\n    closing,\n    velocity,\n  }: {\n    closing: boolean;\n    velocity?: number;\n  }) => {\n    const { gesture, transitionSpec, onOpen, onClose, onTransition } =\n      this.props;\n\n    const toValue = this.getAnimateToValue({\n      ...this.props,\n      closing,\n    });\n\n    this.lastToValue = toValue;\n\n    this.isClosing.setValue(closing ? TRUE : FALSE);\n\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\n\n    const animation =\n      spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n    this.setPointerEventsEnabled(!closing);\n    this.handleStartInteraction();\n\n    clearTimeout(this.pendingGestureCallback);\n\n    onTransition?.({ closing, gesture: velocity !== undefined });\n    animation(gesture, {\n      ...spec.config,\n      velocity,\n      toValue,\n      useNativeDriver,\n      isInteraction: false,\n    }).start(({ finished }) => {\n      this.handleEndInteraction();\n\n      clearTimeout(this.pendingGestureCallback);\n\n      if (finished) {\n        if (closing) {\n          onClose();\n        } else {\n          onOpen();\n        }\n\n        if (this.isCurrentlyMounted) {\n          // Make sure to re-open screen if it wasn't removed\n          this.forceUpdate();\n        }\n      }\n    });\n  };\n\n  private getAnimateToValue = ({\n    closing,\n    layout,\n    gestureDirection,\n  }: {\n    closing?: boolean;\n    layout: Layout;\n    gestureDirection: GestureDirection;\n  }) => {\n    if (!closing) {\n      return 0;\n    }\n\n    return getDistanceForDirection(layout, gestureDirection);\n  };\n\n  private setPointerEventsEnabled = (enabled: boolean) => {\n    const pointerEvents = enabled ? 'box-none' : 'none';\n\n    this.contentRef.current?.setNativeProps({ pointerEvents });\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    const {\n      layout,\n      onClose,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      gestureDirection,\n      gestureVelocityImpact,\n    } = this.props;\n\n    switch (nativeEvent.state) {\n      case GestureState.ACTIVE:\n        this.isSwiping.setValue(TRUE);\n        this.handleStartInteraction();\n        onGestureBegin?.();\n        break;\n      case GestureState.CANCELLED: {\n        this.isSwiping.setValue(FALSE);\n        this.handleEndInteraction();\n\n        const velocity =\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n            ? nativeEvent.velocityY\n            : nativeEvent.velocityX;\n\n        this.animate({ closing: this.props.closing, velocity });\n\n        onGestureCanceled?.();\n        break;\n      }\n      case GestureState.END: {\n        this.isSwiping.setValue(FALSE);\n\n        let distance;\n        let translation;\n        let velocity;\n\n        if (\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ) {\n          distance = layout.height;\n          translation = nativeEvent.translationY;\n          velocity = nativeEvent.velocityY;\n        } else {\n          distance = layout.width;\n          translation = nativeEvent.translationX;\n          velocity = nativeEvent.velocityX;\n        }\n\n        const closing =\n          (translation + velocity * gestureVelocityImpact) *\n            getInvertedMultiplier(gestureDirection) >\n          distance / 2\n            ? velocity !== 0 || translation !== 0\n            : this.props.closing;\n\n        this.animate({ closing, velocity });\n\n        if (closing) {\n          // We call onClose with a delay to make sure that the animation has already started\n          // This will make sure that the state update caused by this doesn't affect start of animation\n          this.pendingGestureCallback = setTimeout(() => {\n            onClose();\n\n            // Trigger an update after we dispatch the action to remove the screen\n            // This will make sure that we check if the screen didn't get removed so we can cancel the animation\n            this.forceUpdate();\n          }, 32) as any as number;\n        }\n\n        onGestureEnd?.();\n        break;\n      }\n    }\n  };\n\n  // Memoize this to avoid extra work on re-render\n  private getInterpolatedStyle = memoize(\n    (\n      styleInterpolator: StackCardStyleInterpolator,\n      animation: StackCardInterpolationProps\n    ) => styleInterpolator(animation)\n  );\n\n  // Keep track of the animation context when deps changes.\n  private getCardAnimation = memoize(\n    (\n      interpolationIndex: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) => ({\n      index: interpolationIndex,\n      current: { progress: current },\n      next: next && { progress: next },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout,\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft,\n      },\n    })\n  );\n\n  private gestureActivationCriteria() {\n    const { layout, gestureDirection, gestureResponseDistance } = this.props;\n    const enableTrackpadTwoFingerGesture = true;\n\n    const distance =\n      gestureResponseDistance !== undefined\n        ? gestureResponseDistance\n        : gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ? GESTURE_RESPONSE_DISTANCE_VERTICAL\n        : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: { bottom: -layout.height + distance },\n        enableTrackpadTwoFingerGesture,\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: { top: -layout.height + distance },\n        enableTrackpadTwoFingerGesture,\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: { right: hitSlop },\n          enableTrackpadTwoFingerGesture,\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: { left: hitSlop },\n          enableTrackpadTwoFingerGesture,\n        };\n      }\n    }\n  }\n\n  private contentRef = React.createRef<View>();\n\n  render() {\n    const {\n      styleInterpolator,\n      interpolationIndex,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlay,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      pageOverflowEnabled,\n      headerDarkContent,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      ...rest\n    } = this.props;\n\n    const interpolationProps = this.getCardAnimation(\n      interpolationIndex,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const interpolatedStyle = this.getInterpolatedStyle(\n      styleInterpolator,\n      interpolationProps\n    );\n\n    const { containerStyle, cardStyle, overlayStyle, shadowStyle } =\n      interpolatedStyle;\n\n    const handleGestureEvent = gestureEnabled\n      ? Animated.event(\n          [\n            {\n              nativeEvent:\n                gestureDirection === 'vertical' ||\n                gestureDirection === 'vertical-inverted'\n                  ? { translationY: gesture }\n                  : { translationX: gesture },\n            },\n          ],\n          { useNativeDriver }\n        )\n      : undefined;\n\n    const { backgroundColor } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent =\n      typeof backgroundColor === 'string'\n        ? Color(backgroundColor).alpha() === 0\n        : false;\n\n    return (\n      <CardAnimationContext.Provider value={interpolationProps}>\n        {\n          // StatusBar messes with translucent status bar on Android\n          // So we should only enable it on iOS\n          Platform.OS === 'ios' &&\n          overlayEnabled &&\n          next &&\n          getIsModalPresentation(styleInterpolator) ? (\n            <ModalStatusBarManager\n              dark={headerDarkContent}\n              layout={layout}\n              insets={insets}\n              style={cardStyle}\n            />\n          ) : null\n        }\n        <Animated.View\n          style={{\n            // This is a dummy style that doesn't actually change anything visually.\n            // Animated needs the animated value to be used somewhere, otherwise things don't update properly.\n            // If we disable animations and hide header, it could end up making the value unused.\n            // So we have this dummy style that will always be used regardless of what else changed.\n            opacity: current,\n          }}\n          // Make sure that this view isn't removed. If this view is removed, our style with animated value won't apply\n          collapsable={false}\n        />\n        <View pointerEvents=\"box-none\" {...rest}>\n          {overlayEnabled ? (\n            <View pointerEvents=\"box-none\" style={StyleSheet.absoluteFill}>\n              {overlay({ style: overlayStyle })}\n            </View>\n          ) : null}\n          <Animated.View\n            style={[styles.container, containerStyle, customContainerStyle]}\n            pointerEvents=\"box-none\"\n          >\n            <PanGestureHandler\n              enabled={layout.width !== 0 && gestureEnabled}\n              onGestureEvent={handleGestureEvent}\n              onHandlerStateChange={this.handleGestureStateChange}\n              {...this.gestureActivationCriteria()}\n            >\n              <Animated.View\n                needsOffscreenAlphaCompositing={hasOpacityStyle(cardStyle)}\n                style={[styles.container, cardStyle]}\n              >\n                {shadowEnabled && shadowStyle && !isTransparent ? (\n                  <Animated.View\n                    style={[\n                      styles.shadow,\n                      gestureDirection === 'horizontal'\n                        ? [styles.shadowHorizontal, styles.shadowLeft]\n                        : gestureDirection === 'horizontal-inverted'\n                        ? [styles.shadowHorizontal, styles.shadowRight]\n                        : gestureDirection === 'vertical'\n                        ? [styles.shadowVertical, styles.shadowTop]\n                        : [styles.shadowVertical, styles.shadowBottom],\n                      { backgroundColor },\n                      shadowStyle,\n                    ]}\n                    pointerEvents=\"none\"\n                  />\n                ) : null}\n                <CardSheet\n                  ref={this.contentRef}\n                  enabled={pageOverflowEnabled}\n                  layout={layout}\n                  style={contentStyle}\n                >\n                  {children}\n                </CardSheet>\n              </Animated.View>\n            </PanGestureHandler>\n          </Animated.View>\n        </View>\n      </CardAnimationContext.Provider>\n    );\n  }\n}\n\nexport const getIsModalPresentation = (\n  cardStyleInterpolator: StackCardStyleInterpolator\n) => {\n  return (\n    cardStyleInterpolator === forModalPresentationIOS ||\n    // Handle custom modal presentation interpolators as well\n    cardStyleInterpolator.name === 'forModalPresentationIOS'\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3,\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: { width: -1, height: 1 },\n  },\n  shadowLeft: {\n    left: 0,\n  },\n  shadowRight: {\n    right: 0,\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: { width: 1, height: -1 },\n  },\n  shadowTop: {\n    top: 0,\n  },\n  shadowBottom: {\n    bottom: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}