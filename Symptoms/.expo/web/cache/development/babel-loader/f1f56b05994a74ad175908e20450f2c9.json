{"ast":null,"code":"import * as React from 'react';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nexport default function useKeyboardManager(isEnabled) {\n  var previouslyFocusedTextInputRef = React.useRef(undefined);\n  var startTimestampRef = React.useRef(0);\n  var keyboardTimeoutRef = React.useRef();\n  var clearKeyboardTimeout = React.useCallback(function () {\n    if (keyboardTimeoutRef.current !== undefined) {\n      clearTimeout(keyboardTimeoutRef.current);\n      keyboardTimeoutRef.current = undefined;\n    }\n  }, []);\n  var onPageChangeStart = React.useCallback(function () {\n    if (!isEnabled()) {\n      return;\n    }\n\n    clearKeyboardTimeout();\n    var input = TextInput.State.currentlyFocusedInput();\n    input === null || input === void 0 ? void 0 : input.blur();\n    previouslyFocusedTextInputRef.current = input;\n    startTimestampRef.current = Date.now();\n  }, [clearKeyboardTimeout, isEnabled]);\n  var onPageChangeConfirm = React.useCallback(function (force) {\n    if (!isEnabled()) {\n      return;\n    }\n\n    clearKeyboardTimeout();\n\n    if (force) {\n      Keyboard.dismiss();\n    } else {\n      var input = previouslyFocusedTextInputRef.current;\n      input === null || input === void 0 ? void 0 : input.blur();\n    }\n\n    previouslyFocusedTextInputRef.current = undefined;\n  }, [clearKeyboardTimeout, isEnabled]);\n  var onPageChangeCancel = React.useCallback(function () {\n    if (!isEnabled()) {\n      return;\n    }\n\n    clearKeyboardTimeout();\n    var input = previouslyFocusedTextInputRef.current;\n\n    if (input) {\n      if (Date.now() - startTimestampRef.current < 100) {\n        keyboardTimeoutRef.current = setTimeout(function () {\n          input === null || input === void 0 ? void 0 : input.focus();\n          previouslyFocusedTextInputRef.current = undefined;\n        }, 100);\n      } else {\n        input === null || input === void 0 ? void 0 : input.focus();\n        previouslyFocusedTextInputRef.current = undefined;\n      }\n    }\n  }, [clearKeyboardTimeout, isEnabled]);\n  React.useEffect(function () {\n    return function () {\n      return clearKeyboardTimeout();\n    };\n  }, [clearKeyboardTimeout]);\n  return {\n    onPageChangeStart: onPageChangeStart,\n    onPageChangeConfirm: onPageChangeConfirm,\n    onPageChangeCancel: onPageChangeCancel\n  };\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAKA,eAAe,SAASC,kBAAT,CAA4BC,SAA5B,EAAsD;AAGnE,MAAMC,6BAA6B,GAAGH,KAAK,CAACI,MAANJ,CAAuBK,SAAvBL,CAAtC;AACA,MAAMM,iBAAiB,GAAGN,KAAK,CAACI,MAANJ,CAAqB,CAArBA,CAA1B;AACA,MAAMO,kBAAkB,GAAGP,KAAK,CAACI,MAANJ,EAA3B;AAEA,MAAMQ,oBAAoB,GAAGR,KAAK,CAACS,WAANT,CAAkB,YAAM;AACnD,QAAIO,kBAAkB,CAACG,OAAnBH,KAA+BF,SAAnC,EAA8C;AAC5CM,kBAAY,CAACJ,kBAAkB,CAACG,OAApB,CAAZC;AACAJ,wBAAkB,CAACG,OAAnBH,GAA6BF,SAA7BE;AACD;AAJ0B,KAK1B,EAL0BP,CAA7B;AAOA,MAAMY,iBAAiB,GAAGZ,KAAK,CAACS,WAANT,CAAkB,YAAM;AAChD,QAAI,CAACE,SAAS,EAAd,EAAkB;AAChB;AACD;;AAEDM,wBAAoB;AAEpB,QAAMK,KAAe,GAAGC,SAAS,CAACC,KAAVD,CAAgBE,qBAAhBF,EAAxB;AAGAD,SAAK,SAALA,SAAK,WAALA,iBAAK,CAAEI,IAAPJ;AAGAV,iCAA6B,CAACO,OAA9BP,GAAwCU,KAAxCV;AAGAG,qBAAiB,CAACI,OAAlBJ,GAA4BY,IAAI,CAACC,GAALD,EAA5BZ;AAhBwB,KAiBvB,CAACE,oBAAD,EAAuBN,SAAvB,CAjBuBF,CAA1B;AAmBA,MAAMoB,mBAAmB,GAAGpB,KAAK,CAACS,WAANT,CACzBqB,eAAD,EAAoB;AAClB,QAAI,CAACnB,SAAS,EAAd,EAAkB;AAChB;AACD;;AAEDM,wBAAoB;;AAEpB,QAAIa,KAAJ,EAAW;AAITC,cAAQ,CAACC,OAATD;AAJF,WAKO;AACL,UAAMT,KAAK,GAAGV,6BAA6B,CAACO,OAA5C;AAIAG,WAAK,SAALA,SAAK,WAALA,iBAAK,CAAEI,IAAPJ;AAjBgB;;AAqBlBV,iCAA6B,CAACO,OAA9BP,GAAwCE,SAAxCF;AAtBwB,KAwB1B,CAACK,oBAAD,EAAuBN,SAAvB,CAxB0BF,CAA5B;AA2BA,MAAMwB,kBAAkB,GAAGxB,KAAK,CAACS,WAANT,CAAkB,YAAM;AACjD,QAAI,CAACE,SAAS,EAAd,EAAkB;AAChB;AACD;;AAEDM,wBAAoB;AAGpB,QAAMK,KAAK,GAAGV,6BAA6B,CAACO,OAA5C;;AAEA,QAAIG,KAAJ,EAAW;AAQT,UAAIK,IAAI,CAACC,GAALD,KAAaZ,iBAAiB,CAACI,OAA/BQ,GAAyC,GAA7C,EAAkD;AAChDX,0BAAkB,CAACG,OAAnBH,GAA6BkB,UAAU,CAAC,YAAM;AAC5CZ,eAAK,SAALA,SAAK,WAALA,iBAAK,CAAEa,KAAPb;AACAV,uCAA6B,CAACO,OAA9BP,GAAwCE,SAAxCF;AAFqC,WAGpC,GAHoC,CAAvCI;AADF,aAKO;AACLM,aAAK,SAALA,SAAK,WAALA,iBAAK,CAAEa,KAAPb;AACAV,qCAA6B,CAACO,OAA9BP,GAAwCE,SAAxCF;AACD;AACF;AA3BwB,KA4BxB,CAACK,oBAAD,EAAuBN,SAAvB,CA5BwBF,CAA3B;AA8BAA,OAAK,CAAC2B,SAAN3B,CAAgB,YAAM;AACpB,WAAO;AAAA,aAAMQ,oBAAoB,EAA1B;AAAA,KAAP;AADF,KAEG,CAACA,oBAAD,CAFHR;AAIA,SAAO;AACLY,qBADK,EACLA,iBADK;AAELQ,uBAFK,EAELA,mBAFK;AAGLI;AAHK,GAAP;AAKD","names":["React","useKeyboardManager","isEnabled","previouslyFocusedTextInputRef","useRef","undefined","startTimestampRef","keyboardTimeoutRef","clearKeyboardTimeout","useCallback","current","clearTimeout","onPageChangeStart","input","TextInput","State","currentlyFocusedInput","blur","Date","now","onPageChangeConfirm","force","Keyboard","dismiss","onPageChangeCancel","setTimeout","focus","useEffect"],"sources":["useKeyboardManager.tsx"],"sourcesContent":["import * as React from 'react';\nimport { HostComponent, Keyboard, TextInput } from 'react-native';\n\ntype InputRef = React.ElementRef<HostComponent<unknown>> | undefined;\n\nexport default function useKeyboardManager(isEnabled: () => boolean) {\n  // Numeric id of the previously focused text input\n  // When a gesture didn't change the tab, we can restore the focused input with this\n  const previouslyFocusedTextInputRef = React.useRef<InputRef>(undefined);\n  const startTimestampRef = React.useRef<number>(0);\n  const keyboardTimeoutRef = React.useRef<any>();\n\n  const clearKeyboardTimeout = React.useCallback(() => {\n    if (keyboardTimeoutRef.current !== undefined) {\n      clearTimeout(keyboardTimeoutRef.current);\n      keyboardTimeoutRef.current = undefined;\n    }\n  }, []);\n\n  const onPageChangeStart = React.useCallback(() => {\n    if (!isEnabled()) {\n      return;\n    }\n\n    clearKeyboardTimeout();\n\n    const input: InputRef = TextInput.State.currentlyFocusedInput();\n\n    // When a page change begins, blur the currently focused input\n    input?.blur();\n\n    // Store the id of this input so we can refocus it if change was cancelled\n    previouslyFocusedTextInputRef.current = input;\n\n    // Store timestamp for touch start\n    startTimestampRef.current = Date.now();\n  }, [clearKeyboardTimeout, isEnabled]);\n\n  const onPageChangeConfirm = React.useCallback(\n    (force: boolean) => {\n      if (!isEnabled()) {\n        return;\n      }\n\n      clearKeyboardTimeout();\n\n      if (force) {\n        // Always dismiss input, even if we don't have a ref to it\n        // We might not have the ref if onPageChangeStart was never called\n        // This can happen if page change was not from a gesture\n        Keyboard.dismiss();\n      } else {\n        const input = previouslyFocusedTextInputRef.current;\n\n        // Dismiss the keyboard only if an input was a focused before\n        // This makes sure we don't dismiss input on going back and focusing an input\n        input?.blur();\n      }\n\n      // Cleanup the ID on successful page change\n      previouslyFocusedTextInputRef.current = undefined;\n    },\n    [clearKeyboardTimeout, isEnabled]\n  );\n\n  const onPageChangeCancel = React.useCallback(() => {\n    if (!isEnabled()) {\n      return;\n    }\n\n    clearKeyboardTimeout();\n\n    // The page didn't change, we should restore the focus of text input\n    const input = previouslyFocusedTextInputRef.current;\n\n    if (input) {\n      // If the interaction was super short we should make sure keyboard won't hide again.\n\n      // Too fast input refocus will result only in keyboard flashing on screen and hiding right away.\n      // During first ~100ms keyboard will be dismissed no matter what,\n      // so we have to make sure it won't interrupt input refocus logic.\n      // That's why when the interaction is shorter than 100ms we add delay so it won't hide once again.\n      // Subtracting timestamps makes us sure the delay is executed only when needed.\n      if (Date.now() - startTimestampRef.current < 100) {\n        keyboardTimeoutRef.current = setTimeout(() => {\n          input?.focus();\n          previouslyFocusedTextInputRef.current = undefined;\n        }, 100);\n      } else {\n        input?.focus();\n        previouslyFocusedTextInputRef.current = undefined;\n      }\n    }\n  }, [clearKeyboardTimeout, isEnabled]);\n\n  React.useEffect(() => {\n    return () => clearKeyboardTimeout();\n  }, [clearKeyboardTimeout]);\n\n  return {\n    onPageChangeStart,\n    onPageChangeConfirm,\n    onPageChangeCancel,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}