{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"enabled\"],\n    _excluded2 = [\"enabled\", \"active\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nvar Screens;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {}\n\nexport var MaybeScreenContainer = function MaybeScreenContainer(_ref) {\n  var enabled = _ref.enabled,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  if (Screens != null) {\n    return React.createElement(Screens.ScreenContainer, _extends({\n      enabled: enabled\n    }, rest));\n  }\n\n  return React.createElement(View, rest);\n};\nexport var MaybeScreen = function MaybeScreen(_ref2) {\n  var enabled = _ref2.enabled,\n      active = _ref2.active,\n      rest = _objectWithoutProperties(_ref2, _excluded2);\n\n  if (Screens != null) {\n    return React.createElement(Screens.Screen, _extends({\n      enabled: enabled,\n      activityState: active\n    }, rest));\n  }\n\n  return React.createElement(View, rest);\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAGA,IAAIC,OAAJ;;AAEA,IAAI;AACFA,SAAO,GAAGC,OAAO,CAAC,sBAAD,CAAjBD;AADF,EAEE,OAAOE,CAAP,EAAU,CAEX;;AAED,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,OAM9B;AAAA,MALJC,OAKI,QALJA,OAKI;AAAA,MAJDC,IAIC;;AACJ,MAAIL,OAAO,IAAI,IAAf,EAAqB;AACnB,WAAOD,oBAACC,OAAD,CAASM,eAAT;AAAyBF,aAAO,EAAEA;AAAlC,OAA+CC,IAA/C,EAAP;AACD;;AAED,SAAON,oBAACQ,IAAD,EAAUF,IAAV,CAAP;AAXK;AAcP,OAAO,IAAMG,WAAW,GAAG,SAAdA,WAAc,QAQrB;AAAA,MAPJJ,OAOI,SAPJA,OAOI;AAAA,MANJK,MAMI,SANJA,MAMI;AAAA,MALDJ,IAKC;;AACJ,MAAIL,OAAO,IAAI,IAAf,EAAqB;AACnB,WACED,oBAACC,OAAD,CAASU,MAAT;AAAgBN,aAAO,EAAEA,OAAzB;AAAkCO,mBAAa,EAAEF;AAAjD,OAA6DJ,IAA7D,EADF;AAGD;;AAED,SAAON,oBAACQ,IAAD,EAAUF,IAAV,CAAP;AAfK","names":["React","Screens","require","e","MaybeScreenContainer","enabled","rest","ScreenContainer","View","MaybeScreen","active","Screen","activityState"],"sources":["Screens.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, ViewProps } from 'react-native';\n\nlet Screens: typeof import('react-native-screens') | undefined;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n  // Ignore\n}\n\nexport const MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  children: React.ReactNode;\n}) => {\n  if (Screens != null) {\n    return <Screens.ScreenContainer enabled={enabled} {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n\nexport const MaybeScreen = ({\n  enabled,\n  active,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  active: 0 | 1 | Animated.AnimatedInterpolation;\n  children: React.ReactNode;\n}) => {\n  if (Screens != null) {\n    return (\n      <Screens.Screen enabled={enabled} activityState={active} {...rest} />\n    );\n  }\n\n  return <View {...rest} />;\n};\n"]},"metadata":{},"sourceType":"module"}