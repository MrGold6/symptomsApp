{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Background, getDefaultHeaderHeight, SafeAreaProviderCompat } from '@react-navigation/elements';\nimport Color from 'color';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { forModalPresentationIOS, forNoAnimation as forNoAnimationCard } from \"../../TransitionConfigs/CardStyleInterpolators\";\nimport { DefaultTransition, ModalFadeTransition, ModalTransition } from \"../../TransitionConfigs/TransitionPresets\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nimport { MaybeScreen, MaybeScreenContainer } from \"../Screens\";\nimport { getIsModalPresentation } from \"./Card\";\nimport CardContainer from \"./CardContainer\";\nvar EPSILON = 0.01;\nvar STATE_INACTIVE = 0;\nvar STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nvar STATE_ON_TOP = 2;\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\n\nvar getInterpolationIndex = function getInterpolationIndex(scenes, index) {\n  var cardStyleInterpolator = scenes[index].descriptor.options.cardStyleInterpolator;\n  var interpolationIndex = 0;\n\n  for (var i = index - 1; i >= 0; i--) {\n    var _scenes$i;\n\n    var cardStyleInterpolatorCurrent = (_scenes$i = scenes[i]) === null || _scenes$i === void 0 ? void 0 : _scenes$i.descriptor.options.cardStyleInterpolator;\n\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n\n    interpolationIndex++;\n  }\n\n  return interpolationIndex;\n};\n\nvar getIsModal = function getIsModal(scene, interpolationIndex, isParentModal) {\n  if (isParentModal) {\n    return true;\n  }\n\n  var cardStyleInterpolator = scene.descriptor.options.cardStyleInterpolator;\n  var isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  var isModal = isModalPresentation && interpolationIndex !== 0;\n  return isModal;\n};\n\nvar getHeaderHeights = function getHeaderHeights(scenes, insets, isParentHeaderShown, isParentModal, layout, previous) {\n  return scenes.reduce(function (acc, curr, index) {\n    var _curr$descriptor$opti = curr.descriptor.options,\n        _curr$descriptor$opti2 = _curr$descriptor$opti.headerStatusBarHeight,\n        headerStatusBarHeight = _curr$descriptor$opti2 === void 0 ? isParentHeaderShown ? 0 : insets.top : _curr$descriptor$opti2,\n        headerStyle = _curr$descriptor$opti.headerStyle;\n    var style = StyleSheet.flatten(headerStyle || {});\n    var height = typeof style.height === 'number' ? style.height : previous[curr.route.key];\n    var interpolationIndex = getInterpolationIndex(scenes, index);\n    var isModal = getIsModal(curr, interpolationIndex, isParentModal);\n    acc[curr.route.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\n\nvar getDistanceFromOptions = function getDistanceFromOptions(layout, descriptor) {\n  var _ref4 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n      presentation = _ref4.presentation,\n      _ref4$gestureDirectio = _ref4.gestureDirection,\n      gestureDirection = _ref4$gestureDirectio === void 0 ? presentation === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection : _ref4$gestureDirectio;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nvar getProgressFromGesture = function getProgressFromGesture(gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions({\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\n\nvar CardStack = function (_React$Component) {\n  _inherits(CardStack, _React$Component);\n\n  var _super = _createSuper(CardStack);\n\n  function CardStack(_props) {\n    var _this;\n\n    _classCallCheck(this, CardStack);\n\n    _this = _super.call(this, _props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          height = _e$nativeEvent$layout.height,\n          width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(state.scenes, props.insets, props.isParentHeaderShown, props.isParentModal, layout, state.headerHeights)\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleHeaderLayout\", function (_ref) {\n      var route = _ref.route,\n          height = _ref.height;\n\n      _this.setState(function (_ref2) {\n        var headerHeights = _ref2.headerHeights;\n        var previousHeight = headerHeights[route.key];\n\n        if (previousHeight === height) {\n          return null;\n        }\n\n        return {\n          headerHeights: _objectSpread(_objectSpread({}, headerHeights), {}, _defineProperty2({}, route.key, height))\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getFocusedRoute\", function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getPreviousScene\", function (_ref3) {\n      var route = _ref3.route;\n      var getPreviousRoute = _this.props.getPreviousRoute;\n      var scenes = _this.state.scenes;\n      var previousRoute = getPreviousRoute({\n        route: route\n      });\n\n      if (previousRoute) {\n        var previousScene = scenes.find(function (scene) {\n          return scene.descriptor.route.key === previousRoute.key;\n        });\n        return previousScene;\n      }\n\n      return undefined;\n    });\n\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    };\n    return _this;\n  }\n\n  _createClass(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          insets = _this$props.insets,\n          state = _this$props.state,\n          routes = _this$props.routes,\n          closingRouteKeys = _this$props.closingRouteKeys,\n          onOpenRoute = _this$props.onOpenRoute,\n          onCloseRoute = _this$props.onCloseRoute,\n          renderHeader = _this$props.renderHeader,\n          renderScene = _this$props.renderScene,\n          isParentHeaderShown = _this$props.isParentHeaderShown,\n          isParentModal = _this$props.isParentModal,\n          onTransitionStart = _this$props.onTransitionStart,\n          onTransitionEnd = _this$props.onTransitionEnd,\n          onGestureStart = _this$props.onGestureStart,\n          onGestureEnd = _this$props.onGestureEnd,\n          onGestureCancel = _this$props.onGestureCancel,\n          _this$props$detachIna = _this$props.detachInactiveScreens,\n          detachInactiveScreens = _this$props$detachIna === void 0 ? Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios' : _this$props$detachIna;\n      var _this$state = this.state,\n          scenes = _this$state.scenes,\n          layout = _this$state.layout,\n          gestures = _this$state.gestures,\n          headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedHeaderHeight = headerHeights[focusedRoute.key];\n      var isFloatHeaderAbsolute = this.state.scenes.slice(-2).some(function (scene) {\n        var _scene$descriptor$opt;\n\n        var options = (_scene$descriptor$opt = scene.descriptor.options) !== null && _scene$descriptor$opt !== void 0 ? _scene$descriptor$opt : {};\n        var headerMode = options.headerMode,\n            headerTransparent = options.headerTransparent,\n            _options$headerShown = options.headerShown,\n            headerShown = _options$headerShown === void 0 ? true : _options$headerShown;\n\n        if (headerTransparent || headerShown === false || headerMode === 'screen') {\n          return true;\n        }\n\n        return false;\n      });\n      var activeScreensLimit = 1;\n\n      for (var i = scenes.length - 1; i >= 0; i--) {\n        var options = scenes[i].descriptor.options;\n        var _options$detachPrevio = options.detachPreviousScreen,\n            detachPreviousScreen = _options$detachPrevio === void 0 ? options.presentation === 'transparentModal' ? false : getIsModalPresentation(options.cardStyleInterpolator) ? i !== scenes.map(function (scene) {\n          return scene.descriptor.options.cardStyleInterpolator;\n        }).lastIndexOf(forModalPresentationIOS) : true : _options$detachPrevio;\n\n        if (detachPreviousScreen === false) {\n          activeScreensLimit++;\n        } else {\n          if (i <= scenes.length - 2) {\n            break;\n          }\n        }\n      }\n\n      var floatingHeader = React.createElement(React.Fragment, {\n        key: \"header\"\n      }, renderHeader({\n        mode: 'float',\n        layout: layout,\n        scenes: scenes,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        onContentHeightChange: this.handleHeaderLayout,\n        style: [styles.floating, isFloatHeaderAbsolute && [{\n          height: focusedHeaderHeight\n        }, styles.absolute]]\n      }));\n      return React.createElement(Background, null, isFloatHeaderAbsolute ? null : floatingHeader, React.createElement(MaybeScreenContainer, {\n        enabled: detachInactiveScreens,\n        style: styles.container,\n        onLayout: this.handleLayout\n      }, routes.map(function (route, index, self) {\n        var _scenes, _scenes2;\n\n        var focused = focusedRoute.key === route.key;\n        var gesture = gestures[route.key];\n        var scene = scenes[index];\n        var isScreenActive = 1;\n\n        if (index < self.length - activeScreensLimit - 1) {\n          isScreenActive = STATE_INACTIVE;\n        } else {\n          var sceneForActivity = scenes[self.length - 1];\n          var outputValue = index === self.length - 1 ? STATE_ON_TOP : index >= self.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP : STATE_INACTIVE;\n          isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n            inputRange: [0, 1 - EPSILON, 1],\n            outputRange: [1, 1, outputValue],\n            extrapolate: 'clamp'\n          }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n        }\n\n        var _scene$descriptor$opt2 = scene.descriptor.options,\n            _scene$descriptor$opt3 = _scene$descriptor$opt2.headerShown,\n            headerShown = _scene$descriptor$opt3 === void 0 ? true : _scene$descriptor$opt3,\n            headerTransparent = _scene$descriptor$opt2.headerTransparent,\n            headerStyle = _scene$descriptor$opt2.headerStyle,\n            headerTintColor = _scene$descriptor$opt2.headerTintColor;\n        var safeAreaInsetTop = insets.top;\n        var safeAreaInsetRight = insets.right;\n        var safeAreaInsetBottom = insets.bottom;\n        var safeAreaInsetLeft = insets.left;\n        var headerHeight = headerShown !== false ? headerHeights[route.key] : 0;\n\n        var _ref5 = StyleSheet.flatten(headerStyle) || {},\n            headerBackgroundColor = _ref5.backgroundColor;\n\n        var headerDarkContent;\n\n        if (headerShown) {\n          if (typeof headerTintColor === 'string') {\n            headerDarkContent = Color(headerTintColor).isDark();\n          } else if (typeof headerBackgroundColor === 'string') {\n            headerDarkContent = !Color(headerBackgroundColor).isDark();\n          }\n        }\n\n        var interpolationIndex = getInterpolationIndex(scenes, index);\n        var isModal = getIsModal(scene, interpolationIndex, isParentModal);\n        var isNextScreenTransparent = ((_scenes = scenes[index + 1]) === null || _scenes === void 0 ? void 0 : _scenes.descriptor.options.presentation) === 'transparentModal';\n        var detachCurrentScreen = ((_scenes2 = scenes[index + 1]) === null || _scenes2 === void 0 ? void 0 : _scenes2.descriptor.options.detachPreviousScreen) !== false;\n        return React.createElement(MaybeScreen, {\n          key: route.key,\n          style: StyleSheet.absoluteFill,\n          enabled: detachInactiveScreens,\n          active: isScreenActive,\n          pointerEvents: \"box-none\"\n        }, React.createElement(CardContainer, {\n          index: index,\n          interpolationIndex: interpolationIndex,\n          modal: isModal,\n          active: index === self.length - 1,\n          focused: focused,\n          closing: closingRouteKeys.includes(route.key),\n          layout: layout,\n          gesture: gesture,\n          scene: scene,\n          safeAreaInsetTop: safeAreaInsetTop,\n          safeAreaInsetRight: safeAreaInsetRight,\n          safeAreaInsetBottom: safeAreaInsetBottom,\n          safeAreaInsetLeft: safeAreaInsetLeft,\n          onGestureStart: onGestureStart,\n          onGestureCancel: onGestureCancel,\n          onGestureEnd: onGestureEnd,\n          headerHeight: headerHeight,\n          isParentHeaderShown: isParentHeaderShown,\n          onHeaderHeightChange: _this2.handleHeaderLayout,\n          getPreviousScene: _this2.getPreviousScene,\n          getFocusedRoute: _this2.getFocusedRoute,\n          headerDarkContent: headerDarkContent,\n          hasAbsoluteFloatHeader: isFloatHeaderAbsolute && !headerTransparent,\n          renderHeader: renderHeader,\n          renderScene: renderScene,\n          onOpenRoute: onOpenRoute,\n          onCloseRoute: onCloseRoute,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: onTransitionEnd,\n          isNextScreenTransparent: isNextScreenTransparent,\n          detachCurrentScreen: detachCurrentScreen\n        }));\n      })), isFloatHeaderAbsolute ? floatingHeader : null);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n\n        var _ref6 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n            animationEnabled = _ref6.animationEnabled;\n\n        acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      var scenes = props.routes.map(function (route, index, self) {\n        var _descriptor$options$h;\n\n        var previousRoute = self[index - 1];\n        var nextRoute = self[index + 1];\n        var oldScene = state.scenes[index];\n        var currentGesture = gestures[route.key];\n        var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n        var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n        var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n        var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n        var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n        var optionsForTransitionConfig = index !== self.length - 1 && nextDescriptor && nextDescriptor.options.presentation !== 'transparentModal' ? nextDescriptor.options : descriptor.options;\n        var defaultTransitionPreset = optionsForTransitionConfig.presentation === 'modal' ? ModalTransition : optionsForTransitionConfig.presentation === 'transparentModal' ? ModalFadeTransition : DefaultTransition;\n        var _optionsForTransition = optionsForTransitionConfig.animationEnabled,\n            animationEnabled = _optionsForTransition === void 0 ? Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos' : _optionsForTransition,\n            _optionsForTransition2 = optionsForTransitionConfig.gestureEnabled,\n            gestureEnabled = _optionsForTransition2 === void 0 ? Platform.OS === 'ios' && animationEnabled : _optionsForTransition2,\n            _optionsForTransition3 = optionsForTransitionConfig.gestureDirection,\n            gestureDirection = _optionsForTransition3 === void 0 ? defaultTransitionPreset.gestureDirection : _optionsForTransition3,\n            _optionsForTransition4 = optionsForTransitionConfig.transitionSpec,\n            transitionSpec = _optionsForTransition4 === void 0 ? defaultTransitionPreset.transitionSpec : _optionsForTransition4,\n            _optionsForTransition5 = optionsForTransitionConfig.cardStyleInterpolator,\n            cardStyleInterpolator = _optionsForTransition5 === void 0 ? animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _optionsForTransition5,\n            _optionsForTransition6 = optionsForTransitionConfig.headerStyleInterpolator,\n            headerStyleInterpolator = _optionsForTransition6 === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _optionsForTransition6,\n            _optionsForTransition7 = optionsForTransitionConfig.cardOverlayEnabled,\n            cardOverlayEnabled = _optionsForTransition7 === void 0 ? Platform.OS !== 'ios' && optionsForTransitionConfig.presentation !== 'transparentModal' || getIsModalPresentation(cardStyleInterpolator) : _optionsForTransition7;\n        var headerMode = (_descriptor$options$h = descriptor.options.headerMode) !== null && _descriptor$options$h !== void 0 ? _descriptor$options$h : !(optionsForTransitionConfig.presentation === 'modal' || optionsForTransitionConfig.presentation === 'transparentModal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'modal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'transparentModal' || getIsModalPresentation(cardStyleInterpolator)) && Platform.OS === 'ios' && descriptor.options.header === undefined ? 'float' : 'screen';\n        var scene = {\n          route: route,\n          descriptor: _objectSpread(_objectSpread({}, descriptor), {}, {\n            options: _objectSpread(_objectSpread({}, descriptor.options), {}, {\n              animationEnabled: animationEnabled,\n              cardOverlayEnabled: cardOverlayEnabled,\n              cardStyleInterpolator: cardStyleInterpolator,\n              gestureDirection: gestureDirection,\n              gestureEnabled: gestureEnabled,\n              headerStyleInterpolator: headerStyleInterpolator,\n              transitionSpec: transitionSpec,\n              headerMode: headerMode\n            })\n          }),\n          progress: {\n            current: getProgressFromGesture(currentGesture, state.layout, descriptor),\n            next: nextGesture && (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) !== 'transparentModal' ? getProgressFromGesture(nextGesture, state.layout, nextDescriptor) : undefined,\n            previous: previousGesture ? getProgressFromGesture(previousGesture, state.layout, previousDescriptor) : undefined\n          },\n          __memo: [state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n        };\n\n        if (oldScene && scene.__memo.every(function (it, i) {\n          return oldScene.__memo[i] === it;\n        })) {\n          return oldScene;\n        }\n\n        return scene;\n      });\n      return {\n        routes: props.routes,\n        scenes: scenes,\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(scenes, props.insets, props.isParentHeaderShown, props.isParentModal, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n\n  return CardStack;\n}(React.Component);\n\nexport { CardStack as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["Background","getDefaultHeaderHeight","SafeAreaProviderCompat","Color","React","forModalPresentationIOS","forNoAnimation","forNoAnimationCard","DefaultTransition","ModalFadeTransition","ModalTransition","getDistanceForDirection","MaybeScreen","MaybeScreenContainer","getIsModalPresentation","CardContainer","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","Object","freeze","options","getInterpolationIndex","scenes","index","cardStyleInterpolator","descriptor","interpolationIndex","i","cardStyleInterpolatorCurrent","_scenes$i","getIsModal","scene","isParentModal","isModalPresentation","isModal","getHeaderHeights","insets","isParentHeaderShown","layout","previous","reduce","acc","curr","headerStatusBarHeight","top","headerStyle","style","StyleSheet","flatten","height","route","key","getDistanceFromOptions","presentation","gestureDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","constructor","props","_defineProperty","e","nativeEvent","setState","state","headerHeights","previousHeight","routes","getPreviousRoute","previousRoute","previousScene","find","undefined","gestures","initialMetrics","frame","descriptors","render","closingRouteKeys","onOpenRoute","onCloseRoute","renderHeader","renderScene","onTransitionStart","onTransitionEnd","onGestureStart","onGestureEnd","onGestureCancel","detachInactiveScreens","Platform","OS","focusedRoute","focusedHeaderHeight","isFloatHeaderAbsolute","slice","some","headerMode","headerTransparent","headerShown","activeScreensLimit","length","detachPreviousScreen","map","lastIndexOf","floatingHeader","Fragment","mode","getPreviousScene","getFocusedRoute","onContentHeightChange","handleHeaderLayout","styles","floating","absolute","enabled","container","onLayout","handleLayout","self","focused","isScreenActive","sceneForActivity","outputValue","progress","current","extrapolate","headerTintColor","safeAreaInsetTop","safeAreaInsetRight","right","safeAreaInsetBottom","bottom","safeAreaInsetLeft","left","headerHeight","headerBackgroundColor","backgroundColor","headerDarkContent","isDark","isNextScreenTransparent","detachCurrentScreen","absoluteFill","active","pointerEvents","modal","closing","includes","onHeaderHeightChange","hasAbsoluteFloatHeader","animationEnabled","Animated","Value","openingRouteKeys","nextRoute","oldScene","currentGesture","previousGesture","nextGesture","nextDescriptor","previousDescriptor","optionsForTransitionConfig","defaultTransitionPreset","gestureEnabled","transitionSpec","headerStyleInterpolator","cardOverlayEnabled","header","next","__memo","every","it","Component","create","flex","position","zIndex"],"sources":["CardStack.tsx"],"sourcesContent":["import {\n  Background,\n  getDefaultHeaderHeight,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport type {\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  Platform,\n  StyleSheet,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport {\n  forModalPresentationIOS,\n  forNoAnimation as forNoAnimationCard,\n} from '../../TransitionConfigs/CardStyleInterpolators';\nimport {\n  DefaultTransition,\n  ModalFadeTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport type {\n  Layout,\n  Scene,\n  StackDescriptor,\n  StackDescriptorMap,\n  StackHeaderMode,\n  StackNavigationOptions,\n} from '../../types';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport { MaybeScreen, MaybeScreenContainer } from '../Screens';\nimport { getIsModalPresentation } from './Card';\nimport CardContainer from './CardContainer';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  isParentHeaderShown: boolean;\n  isParentModal: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getInterpolationIndex = (scenes: Scene[], index: number) => {\n  const { cardStyleInterpolator } = scenes[index].descriptor.options;\n\n  // Start from current card and count backwards the number of cards with same interpolation\n  let interpolationIndex = 0;\n\n  for (let i = index - 1; i >= 0; i--) {\n    const cardStyleInterpolatorCurrent =\n      scenes[i]?.descriptor.options.cardStyleInterpolator;\n\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n\n    interpolationIndex++;\n  }\n\n  return interpolationIndex;\n};\n\nconst getIsModal = (\n  scene: Scene,\n  interpolationIndex: number,\n  isParentModal: boolean\n) => {\n  if (isParentModal) {\n    return true;\n  }\n\n  const { cardStyleInterpolator } = scene.descriptor.options;\n  const isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  const isModal = isModalPresentation && interpolationIndex !== 0;\n\n  return isModal;\n};\n\nconst getHeaderHeights = (\n  scenes: Scene[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  isParentModal: boolean,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return scenes.reduce<Record<string, number>>((acc, curr, index) => {\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n      headerStyle,\n    } = curr.descriptor.options;\n\n    const style = StyleSheet.flatten(headerStyle || {});\n\n    const height =\n      typeof style.height === 'number'\n        ? style.height\n        : previous[curr.route.key];\n\n    const interpolationIndex = getInterpolationIndex(scenes, index);\n    const isModal = getIsModal(curr, interpolationIndex, isParentModal);\n\n    acc[curr.route.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    presentation,\n    gestureDirection = presentation === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = (descriptor?.options || {}) as StackNavigationOptions;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Props,\n    state: State\n  ): Partial<State> | null {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    const scenes = props.routes.map((route, index, self) => {\n      const previousRoute = self[index - 1];\n      const nextRoute = self[index + 1];\n\n      const oldScene = state.scenes[index];\n\n      const currentGesture = gestures[route.key];\n      const previousGesture = previousRoute\n        ? gestures[previousRoute.key]\n        : undefined;\n      const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n      const descriptor =\n        props.descriptors[route.key] ||\n        state.descriptors[route.key] ||\n        (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n      const nextDescriptor =\n        props.descriptors[nextRoute?.key] || state.descriptors[nextRoute?.key];\n\n      const previousDescriptor =\n        props.descriptors[previousRoute?.key] ||\n        state.descriptors[previousRoute?.key];\n\n      // When a screen is not the last, it should use next screen's transition config\n      // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n      // For example combining a slide and a modal transition would look wrong otherwise\n      // With this approach, combining different transition styles in the same navigator mostly looks right\n      // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n      // but majority of the transitions look alright\n      const optionsForTransitionConfig =\n        index !== self.length - 1 &&\n        nextDescriptor &&\n        nextDescriptor.options.presentation !== 'transparentModal'\n          ? nextDescriptor.options\n          : descriptor.options;\n\n      let defaultTransitionPreset =\n        optionsForTransitionConfig.presentation === 'modal'\n          ? ModalTransition\n          : optionsForTransitionConfig.presentation === 'transparentModal'\n          ? ModalFadeTransition\n          : DefaultTransition;\n\n      const {\n        animationEnabled = Platform.OS !== 'web' &&\n          Platform.OS !== 'windows' &&\n          Platform.OS !== 'macos',\n        gestureEnabled = Platform.OS === 'ios' && animationEnabled,\n        gestureDirection = defaultTransitionPreset.gestureDirection,\n        transitionSpec = defaultTransitionPreset.transitionSpec,\n        cardStyleInterpolator = animationEnabled === false\n          ? forNoAnimationCard\n          : defaultTransitionPreset.cardStyleInterpolator,\n        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n        cardOverlayEnabled = (Platform.OS !== 'ios' &&\n          optionsForTransitionConfig.presentation !== 'transparentModal') ||\n          getIsModalPresentation(cardStyleInterpolator),\n      } = optionsForTransitionConfig;\n\n      const headerMode: StackHeaderMode =\n        descriptor.options.headerMode ??\n        (!(\n          optionsForTransitionConfig.presentation === 'modal' ||\n          optionsForTransitionConfig.presentation === 'transparentModal' ||\n          nextDescriptor?.options.presentation === 'modal' ||\n          nextDescriptor?.options.presentation === 'transparentModal' ||\n          getIsModalPresentation(cardStyleInterpolator)\n        ) &&\n        Platform.OS === 'ios' &&\n        descriptor.options.header === undefined\n          ? 'float'\n          : 'screen');\n\n      const scene = {\n        route,\n        descriptor: {\n          ...descriptor,\n          options: {\n            ...descriptor.options,\n            animationEnabled,\n            cardOverlayEnabled,\n            cardStyleInterpolator,\n            gestureDirection,\n            gestureEnabled,\n            headerStyleInterpolator,\n            transitionSpec,\n            headerMode,\n          },\n        },\n        progress: {\n          current: getProgressFromGesture(\n            currentGesture,\n            state.layout,\n            descriptor\n          ),\n          next:\n            nextGesture &&\n            nextDescriptor?.options.presentation !== 'transparentModal'\n              ? getProgressFromGesture(\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n          previous: previousGesture\n            ? getProgressFromGesture(\n                previousGesture,\n                state.layout,\n                previousDescriptor\n              )\n            : undefined,\n        },\n        __memo: [\n          state.layout,\n          descriptor,\n          nextDescriptor,\n          previousDescriptor,\n          currentGesture,\n          nextGesture,\n          previousGesture,\n        ],\n      };\n\n      if (\n        oldScene &&\n        scene.__memo.every((it, i) => {\n          // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n          return oldScene.__memo[i] === it;\n        })\n      ) {\n        return oldScene;\n      }\n\n      return scene;\n    });\n\n    return {\n      routes: props.routes,\n      scenes,\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        scenes,\n        props.insets,\n        props.isParentHeaderShown,\n        props.isParentModal,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          state.scenes,\n          props.insets,\n          props.isParentHeaderShown,\n          props.isParentModal,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.descriptor.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      insets,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      renderHeader,\n      renderScene,\n      isParentHeaderShown,\n      isParentModal,\n      onTransitionStart,\n      onTransitionEnd,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      detachInactiveScreens = Platform.OS === 'web' ||\n        Platform.OS === 'android' ||\n        Platform.OS === 'ios',\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some((scene) => {\n      const options = scene.descriptor.options ?? {};\n      const { headerMode, headerTransparent, headerShown = true } = options;\n\n      if (\n        headerTransparent ||\n        headerShown === false ||\n        headerMode === 'screen'\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const { options } = scenes[i].descriptor;\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = options.presentation === 'transparentModal'\n          ? false\n          : getIsModalPresentation(options.cardStyleInterpolator)\n          ? i !==\n            scenes\n              .map((scene) => scene.descriptor.options.cardStyleInterpolator)\n              .lastIndexOf(forModalPresentationIOS)\n          : true,\n      } = options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        // Check at least last 2 screens before stopping\n        // This will make sure that screen isn't detached when another screen is animating on top of the transparent one\n        // For example, (Opaque -> Transparent -> Opaque)\n        if (i <= scenes.length - 2) {\n          break;\n        }\n      }\n    }\n\n    const floatingHeader = (\n      <React.Fragment key=\"header\">\n        {renderHeader({\n          mode: 'float',\n          layout,\n          scenes,\n          getPreviousScene: this.getPreviousScene,\n          getFocusedRoute: this.getFocusedRoute,\n          onContentHeightChange: this.handleHeaderLayout,\n          style: [\n            styles.floating,\n            isFloatHeaderAbsolute && [\n              // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n              { height: focusedHeaderHeight },\n              styles.absolute,\n            ],\n          ],\n        })}\n      </React.Fragment>\n    );\n\n    return (\n      <Background>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={detachInactiveScreens}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\n\n            if (index < self.length - activeScreensLimit - 1) {\n              // screen should be inactive because it is too deep in the stack\n              isScreenActive = STATE_INACTIVE;\n            } else {\n              const sceneForActivity = scenes[self.length - 1];\n              const outputValue =\n                index === self.length - 1\n                  ? STATE_ON_TOP // the screen is on top after the transition\n                  : index >= self.length - activeScreensLimit\n                  ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                  : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n              isScreenActive = sceneForActivity\n                ? sceneForActivity.progress.current.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, outputValue],\n                    extrapolate: 'clamp',\n                  })\n                : STATE_TRANSITIONING_OR_BELOW_TOP;\n            }\n\n            const {\n              headerShown = true,\n              headerTransparent,\n              headerStyle,\n              headerTintColor,\n            } = scene.descriptor.options;\n\n            const safeAreaInsetTop = insets.top;\n            const safeAreaInsetRight = insets.right;\n            const safeAreaInsetBottom = insets.bottom;\n            const safeAreaInsetLeft = insets.left;\n\n            const headerHeight =\n              headerShown !== false ? headerHeights[route.key] : 0;\n\n            const { backgroundColor: headerBackgroundColor } =\n              StyleSheet.flatten(headerStyle) || {};\n\n            let headerDarkContent: boolean | undefined;\n\n            if (headerShown) {\n              if (typeof headerTintColor === 'string') {\n                headerDarkContent = Color(headerTintColor).isDark();\n              } else if (typeof headerBackgroundColor === 'string') {\n                headerDarkContent = !Color(headerBackgroundColor).isDark();\n              }\n            }\n\n            // Start from current card and count backwards the number of cards with same interpolation\n            const interpolationIndex = getInterpolationIndex(scenes, index);\n            const isModal = getIsModal(\n              scene,\n              interpolationIndex,\n              isParentModal\n            );\n\n            const isNextScreenTransparent =\n              scenes[index + 1]?.descriptor.options.presentation ===\n              'transparentModal';\n\n            const detachCurrentScreen =\n              scenes[index + 1]?.descriptor.options.detachPreviousScreen !==\n              false;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={detachInactiveScreens}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  interpolationIndex={interpolationIndex}\n                  modal={isModal}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  headerDarkContent={headerDarkContent}\n                  hasAbsoluteFloatHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  isNextScreenTransparent={isNextScreenTransparent}\n                  detachCurrentScreen={detachCurrentScreen}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </Background>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}