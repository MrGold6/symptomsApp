{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"status\", \"label\", \"onPress\", \"labelStyle\", \"theme\", \"testID\", \"mode\", \"position\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Checkbox from \"./Checkbox\";\nimport CheckboxAndroid from \"./CheckboxAndroid\";\nimport CheckboxIOS from \"./CheckboxIOS\";\nimport Text from \"../Typography/Text\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\n\nvar CheckboxItem = function CheckboxItem(_ref) {\n  var style = _ref.style,\n      status = _ref.status,\n      label = _ref.label,\n      onPress = _ref.onPress,\n      labelStyle = _ref.labelStyle,\n      theme = _ref.theme,\n      testID = _ref.testID,\n      mode = _ref.mode,\n      _ref$position = _ref.position,\n      position = _ref$position === void 0 ? 'trailing' : _ref$position,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var checkboxProps = _objectSpread(_objectSpread({}, props), {}, {\n    status: status,\n    theme: theme\n  });\n\n  var isLeading = position === 'leading';\n  var checkbox;\n\n  if (mode === 'android') {\n    checkbox = React.createElement(CheckboxAndroid, checkboxProps);\n  } else if (mode === 'ios') {\n    checkbox = React.createElement(CheckboxIOS, checkboxProps);\n  } else {\n    checkbox = React.createElement(Checkbox, checkboxProps);\n  }\n\n  return React.createElement(TouchableRipple, {\n    accessibilityLabel: label,\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      checked: status === 'checked'\n    },\n    onPress: onPress,\n    testID: testID\n  }, React.createElement(View, {\n    style: [styles.container, style],\n    pointerEvents: \"none\",\n    importantForAccessibility: \"no-hide-descendants\"\n  }, isLeading && checkbox, React.createElement(Text, {\n    style: [styles.label, {\n      color: theme.colors.text,\n      textAlign: isLeading ? 'right' : 'left'\n    }, labelStyle]\n  }, label), !isLeading && checkbox));\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\nexport default withTheme(CheckboxItem);\nvar CheckboxItemWithTheme = withTheme(CheckboxItem);\nexport { CheckboxItemWithTheme as CheckboxItem };\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1\n  }\n});","map":{"version":3,"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAUA,OAAOC,QAAP;AACA,OAAOC,eAAP;AACA,OAAOC,WAAP;AACA,OAAOC,IAAP;AACA,OAAOC,eAAP;AACA,SAASC,SAAT;;AAyEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAWR;AAAA,MAVXC,KAUW,QAVXA,KAUW;AAAA,MATXC,MASW,QATXA,MASW;AAAA,MARXC,KAQW,QARXA,KAQW;AAAA,MAPXC,OAOW,QAPXA,OAOW;AAAA,MANXC,UAMW,QANXA,UAMW;AAAA,MALXC,KAKW,QALXA,KAKW;AAAA,MAJXC,MAIW,QAJXA,MAIW;AAAA,MAHXC,IAGW,QAHXA,IAGW;AAAA,2BAFXC,QAEW;AAAA,MAFXA,QAEW,8BAFA,UAEA;AAAA,MADRC,KACQ;;AACX,MAAMC,aAAa,mCAAQD,KAAR;AAAeR,UAAZ,EAAYA,MAAf;AAAuBI;AAAvB,IAAnB;;AACA,MAAMM,SAAS,GAAGH,QAAQ,KAAK,SAA/B;AACA,MAAII,QAAJ;;AAEA,MAAIL,IAAI,KAAK,SAAb,EAAwB;AACtBK,YAAQ,GAAGpB,oBAACE,eAAD,EAAqBgB,aAArB,CAAXE;AADF,SAEO,IAAIL,IAAI,KAAK,KAAb,EAAoB;AACzBK,YAAQ,GAAGpB,oBAACG,WAAD,EAAiBe,aAAjB,CAAXE;AADK,SAEA;AACLA,YAAQ,GAAGpB,oBAACC,QAAD,EAAciB,aAAd,CAAXE;AACD;;AAED,SACEpB,oBAACK,eAAD;AACEgB,sBAAkB,EAAEX,KADtB;AAEEY,qBAAiB,EAAC,UAFpB;AAGEC,sBAAkB,EAAE;AAClBC,aAAO,EAAEf,MAAM,KAAK;AADF,KAHtB;AAMEE,WAAO,EAAEA,OANX;AAOEG,UAAM,EAAEA;AAPV,KASEd,oBAACyB,IAAD;AACEjB,SAAK,EAAE,CAACkB,MAAM,CAACC,SAAR,EAAmBnB,KAAnB,CADT;AAEEoB,iBAAa,EAAC,MAFhB;AAGEC,6BAAyB,EAAC;AAH5B,KAKGV,SAAS,IAAIC,QALhB,EAMEpB,oBAACI,IAAD;AACEI,SAAK,EAAE,CACLkB,MAAM,CAAChB,KADF,EAEL;AACEoB,WAAK,EAAEjB,KAAK,CAACkB,MAANlB,CAAamB,IADtB;AAEEC,eAAS,EAAEd,SAAS,GAAG,OAAH,GAAa;AAFnC,KAFK,EAMLP,UANK;AADT,KAUGF,KAVH,CANF,EAkBG,CAACS,SAAD,IAAcC,QAlBjB,CATF,CADF;AAxBF;;AA0DAb,YAAY,CAAC2B,WAAb3B,GAA2B,eAA3BA;AAEA,eAAeD,SAAS,CAACC,YAAD,CAAxB;AAGA,IAAM4B,qBAAqB,GAAG7B,SAAS,CAACC,YAAD,CAAvC;AAEA,SAAS4B,qBAAqB,IAAI5B,YAAlC;AAEA,IAAMmB,MAAM,GAAGU,UAAU,CAACC,MAAXD,CAAkB;AAC/BT,WAAS,EAAE;AACTW,iBAAa,EAAE,KADN;AAETC,cAAU,EAAE,QAFH;AAGTC,kBAAc,EAAE,eAHP;AAITC,mBAAe,EAAE,CAJR;AAKTC,qBAAiB,EAAE;AALV,GADoB;AAQ/BhC,OAAK,EAAE;AACLiC,YAAQ,EAAE,EADL;AAELC,cAAU,EAAE,CAFP;AAGLC,YAAQ,EAAE;AAHL;AARwB,CAAlBT,CAAf","names":["React","Checkbox","CheckboxAndroid","CheckboxIOS","Text","TouchableRipple","withTheme","CheckboxItem","style","status","label","onPress","labelStyle","theme","testID","mode","position","props","checkboxProps","isLeading","checkbox","accessibilityLabel","accessibilityRole","accessibilityState","checked","View","styles","container","pointerEvents","importantForAccessibility","color","colors","text","textAlign","displayName","CheckboxItemWithTheme","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","fontSize","flexShrink","flexGrow"],"sources":["CheckboxItem.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport Checkbox from './Checkbox';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Checkbox control position.\n   */\n  position?: 'leading' | 'trailing';\n  /**\n   * Whether `<Checkbox.Android />` or `<Checkbox.IOS />` should be used.\n   * Left undefined `<Checkbox />` will be used.\n   */\n  mode?: 'android' | 'ios';\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  labelStyle,\n  theme,\n  testID,\n  mode,\n  position = 'trailing',\n  ...props\n}: Props) => {\n  const checkboxProps = { ...props, status, theme };\n  const isLeading = position === 'leading';\n  let checkbox;\n\n  if (mode === 'android') {\n    checkbox = <CheckboxAndroid {...checkboxProps} />;\n  } else if (mode === 'ios') {\n    checkbox = <CheckboxIOS {...checkboxProps} />;\n  } else {\n    checkbox = <Checkbox {...checkboxProps} />;\n  }\n\n  return (\n    <TouchableRipple\n      accessibilityLabel={label}\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{\n        checked: status === 'checked',\n      }}\n      onPress={onPress}\n      testID={testID}\n    >\n      <View\n        style={[styles.container, style]}\n        pointerEvents=\"none\"\n        importantForAccessibility=\"no-hide-descendants\"\n      >\n        {isLeading && checkbox}\n        <Text\n          style={[\n            styles.label,\n            {\n              color: theme.colors.text,\n              textAlign: isLeading ? 'right' : 'left',\n            },\n            labelStyle,\n          ]}\n        >\n          {label}\n        </Text>\n        {!isLeading && checkbox}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nexport default withTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nconst CheckboxItemWithTheme = withTheme(CheckboxItem);\n// @component-docs ignore-next-line\nexport { CheckboxItemWithTheme as CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}